#+title: Documentation for writing stuff on this blog

* Shortcodes
** link shortcut shortcodes
- github path [description]
- gitlab path [description]
- niconico path [description]
- pixiv path [desciption]

Example: ={{< github "kisaragi-hiu" >}}= → a link to https://github.com/kisaragi-hiu

Vice versa for other sites.
** HTML wrappers
- kbd keys
- ruby text furigana

These exist because it’s painful to write inline HTML in Org.

Example:
- ={{< kbd "Tab" >}}= → ~<kbd>Tab</kbd>~
- ={{< ruby "漢字" "ㄏㄢˋㄗˋ" >}}= → ~<ruby>漢字<rt>ㄏㄢˋㄗˋ</rt></ruby>~

** side-by-side
side-by-side . content

Display elements in =content= in a flex div.

If you only give it two elements (such as two src blocks), they will be displayed side-by-side. This is the primary use.

** video
- video url

Display a GIF-like autoplay video.

Use Org’s =#+caption= to add a figcaption.

** project
- project url title &key melpa-badge . description

Used for projects in the project list.

Remember that Hugo does not allow mixing positional and named arguments, so if you want to pass in the melpa-badge argument you’ll have to name =url= and =title= as well.

#+begin_example
{{% project url="https://github.com/kisaragi-hiu/cangjie.el" title="Cangjie.el" melpa-badge="cangjie" %}}
Retrieve Cangjie code for Han character in Emacs.
{{% /project %}}
#+end_example

- You have to use ={{% … %}}=. This is so that Org syntax can be used in the wrapped description.
- melpa-badge shows a melpa badge of the specified package next to the title.
- This might be renovated into just Org syntax later on.

** melpa-badge
- melpa-badge package

Display a melpa badge as an image link.

* Partials
Partials are like shortcodes, but for use in other templates.

** melpa-badge

like the melpa-badge shortcode, but as a partial.

Example: ={{ partial "melpa-badge" "magit" }}=

Used in the =project= shortcode definition.

* page properties

- =toc=: If not empty, a table of content will be displayed on the page.
- =hugo_nolist=: only applies to list pages. Only display the page’s own content and not its children, effectively turning the list into a single page. This is first used in [[file:content/projects/_index.org]].

* Pages vs. Blog posts

A blog post has a date and is kind of like a public diary.

An individual page should be a standalone document (ie. [[https://www.orgroam.com/manual/A-Brief-Introduction-to-the-Zettelkasten-Method.html][a concept note]]); it should be also be a document that will [[https://www.gwern.net/Wikipedia-and-Other-Wikis][obviously not fit on Wikipedia]].

* Setting a different title for a list page

For example, I want the =prsk= tag to display as “Project Sekai” in its list page, but remain “prsk” in a tag list.

If I simply set its title to “Project Sekai”, that will also be used in a tag list.

Instead, set the name to be used in tag lists as its =linktitle=, and the desired display name in =title=. Ordinarily =linktitle= takes precedance over =title=, but as [[file:templates/_default/list.html][my list page template references the =title= property directly]], that property is used in the displayed page.
* Grouping posts by date in a template

Example:

#+begin_src web
{{ range (where .Site.RegularPages "Section" "blog").GroupByDate "2006" }}
<div class="index-year">
    <h1>{{ .Key }}</h1>
    {{ range .Pages }}
    {{ .Scratch.Set "noyear" true }}
    {{ partial "index-item" . }}
    {{ end }}
</div>
{{ end }}
#+end_src

- Get a list, call its =GroupByDate= method with a Go-style timestamp specifier
- Use =range= to iterate through the result
- The result contains
  - =Key=, the matched thing that makes the group, which is the year in the example
  - and =Pages=, the pages that share the same key
- You can further iterate on the inner =.Pages=
