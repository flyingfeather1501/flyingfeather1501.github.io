<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Kisaragi Hiu: Kisaragi Hiu</title>
 <link rel="self" href="http://kisaragi-hiu.com/feeds/all.atom.xml" />
 <link href="http://kisaragi-hiu.com/index.html" />
 <id>urn:http-kisaragi-hiu-com:-index-html</id>
 <updated>2018-11-04T00:37:50Z</updated>
 <entry><title type="text">QR Codes from Emacs</title><id>urn:https-kisaragi-hiu-com:blog-2019-09-24-qr-codes-from-emacs-html</id><published>2019-09-24T22:45:48+0900</published><updated>2019-09-24T22:45:48+0900</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2019-09-24-qr-codes-from-emacs.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;This article was inspired by &lt;a href="https://blog.jpalardy.com/posts/qr-codes-on-the-command-line/"&gt;QR Codes on the Command-Line&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;QR codes are nice: if you want to send e.g. a URL or a short string to your phone, just turn it into a QR code and scan it on the phone, no internet required.&lt;/p&gt;&lt;p&gt;Install &lt;a href="https://fukuchi.org/works/qrencode/index.html.en"&gt;&lt;code&gt;qrencode&lt;/code&gt;&lt;/a&gt; on your system:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S qrencode
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Now a QR code can be generated in Emacs by directly calling the shell command, then dumping it to an ASCII art in the &lt;code&gt;*Messages*&lt;/code&gt; buffer:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command-to-string&lt;/span&gt; &lt;span class="s"&gt;"qrencode &amp;#39;hello world&amp;#39; -t UTF8 -o -"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="image"&gt;&lt;p&gt;&lt;img src="/static/emacs-qrencode-as-ascii.png" style="max-width:100%;max-height:25rem;" class=""/&gt;&lt;/p&gt;&lt;p class="image-caption"&gt;qrencode output in *Messages*&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Of course, we should utilize Emacs's ability to display images. Here's a Emacs command that prompts for the string, encodes it with &lt;code&gt;qrencode&lt;/code&gt;, and displays it in a nice PNG buffer.&lt;/p&gt;&lt;h2 id="k-q-gui-only"&gt;&lt;code&gt;kisaragi/qr-encode&lt;/code&gt;&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;kisaragi/qr-encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;str&lt;/span&gt; &lt;span class="kp"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"Encode STR as a QR code.&lt;/span&gt;

 &lt;span class="s"&gt;Return a new buffer or BUF with the code in it."&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"MString to encode: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="c1"&gt;; Open a prompt; pass input as str&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-buffer-create&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;buf&lt;/span&gt; &lt;span class="s"&gt;"*QR Code*"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;inhibit-read-only&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;                           &lt;span class="c1"&gt;; make sure we can write the output&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-current-buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-region&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;           &lt;span class="c1"&gt;; Clear the buffer&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;make-process&lt;/span&gt;                                        &lt;span class="c1"&gt;; Start a process&lt;/span&gt;
      &lt;span class="nb"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"qrencode"&lt;/span&gt; &lt;span class="nb"&gt;:buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;                     &lt;span class="c1"&gt;; that writes stdout to `buffer&amp;#39;&lt;/span&gt;
      &lt;span class="nb"&gt;:command&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"qrencode"&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;str&lt;/span&gt; &lt;span class="s"&gt;"-t"&lt;/span&gt; &lt;span class="s"&gt;"PNG"&lt;/span&gt; &lt;span class="s"&gt;"-o"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;; "-o -" sends output to stdout&lt;/span&gt;
      &lt;span class="nb"&gt;:coding&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;no-conversion&lt;/span&gt;                              &lt;span class="c1"&gt;; Don&amp;#39;t encode stdout as string&lt;/span&gt;
      &lt;span class="nb"&gt;:sentinel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt; &lt;span class="nv"&gt;change&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string=&lt;/span&gt; &lt;span class="nv"&gt;change&lt;/span&gt; &lt;span class="s"&gt;"finished\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;; If the process successfully exits,&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-current-buffer&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;process-buffer&lt;/span&gt; &lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;; then go to the buffer,&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;image-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        &lt;span class="c1"&gt;; display its contents as PNG,&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;image-transform-fit-to-height&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt; &lt;span class="c1"&gt;; and resize it so it&amp;#39;s not tiny&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;called-interactively-p&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;display-buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;video autoplay="autoplay" style="max-width:100%;max-height:40rem;" muted="muted" loop="loop" src="/static/emacs-kisaragi-qr-encode.mp4"&gt;&lt;/video&gt;&lt;h1 id="g528"&gt;In the Terminal&lt;/h1&gt;&lt;p&gt;For &lt;a href="https://blog.aaronbieber.com/2016/12/29/don-t-use-terminal-emacs.html"&gt;as nice as GUI Emacs is&lt;/a&gt;, sometimes I just have to use Emacs in a terminal — specifically, on Android, under &lt;a href="https://termux.com/"&gt;Termux&lt;/a&gt;. This version is what I have in &lt;a href="https://gitlab.com/kisaragi-hiu/.emacs.d" class=""&gt;my Emacs configuration&lt;/a&gt; right now (2019-09-24), which uses ASCII art output if it is run in a terminal.&lt;/p&gt;&lt;h2 id="k-q-with-non-gui"&gt;&lt;code&gt;kisaragi/qr-encode&lt;/code&gt; with non-GUI support&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;kisaragi/qr-encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;str&lt;/span&gt; &lt;span class="kp"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="nv"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"Encode STR as a QR code.&lt;/span&gt;

 &lt;span class="s"&gt;Return a new buffer or BUF with the code in it."&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"MString to encode: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-buffer-create&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;buf&lt;/span&gt; &lt;span class="s"&gt;"*QR Code*"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;display-graphic-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"PNG"&lt;/span&gt; &lt;span class="s"&gt;"UTF8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;        &lt;span class="c1"&gt;; use PNG in a graphical frame&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;inhibit-read-only&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-current-buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-region&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;make-process&lt;/span&gt;
      &lt;span class="nb"&gt;:name&lt;/span&gt; &lt;span class="s"&gt;"qrencode"&lt;/span&gt; &lt;span class="nb"&gt;:buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;
      &lt;span class="nb"&gt;:command&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"qrencode"&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;str&lt;/span&gt; &lt;span class="s"&gt;"-t"&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"-o"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;:coding&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;no-conversion&lt;/span&gt;
      &lt;span class="c1"&gt;;; seems only the filter function is able to move point to top&lt;/span&gt;
      &lt;span class="nb"&gt;:filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-current-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;process-buffer&lt;/span&gt; &lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;; Make sure we&amp;#39;re looking at the&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                              &lt;span class="c1"&gt;; top of the output buffer&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-marker&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;process-mark&lt;/span&gt; &lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
      &lt;span class="nb"&gt;:sentinel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt; &lt;span class="nv"&gt;change&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string=&lt;/span&gt; &lt;span class="nv"&gt;change&lt;/span&gt; &lt;span class="s"&gt;"finished\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-current-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;process-buffer&lt;/span&gt; &lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;string=&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"PNG"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;image-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;image-transform-fit-to-height&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;                                 &lt;span class="c1"&gt;; decode the output as we&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;text-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="c1"&gt;; suppressed it at line 14&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;decode-coding-region&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;utf-8&lt;/span&gt;&lt;span class="p"&gt;)))))))&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;called-interactively-p&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;display-buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</content></entry><entry><title type="text">Setting the width of Emacs profiler reports</title><id>urn:https-kisaragi-hiu-com:blog-2019-05-16-emacs-profiler-width-html</id><published>2019-05-16T21:39:41+08:00</published><updated>2019-05-16T21:39:41+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2019-05-16-emacs-profiler-width.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;div&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;TL;DR: &lt;/strong&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Generalized-Variables.html"&gt;&lt;code&gt;setf&lt;/code&gt;&lt;/a&gt; the caar of &lt;code&gt;profiler-report-cpu-line-format&lt;/code&gt; and &lt;code&gt;profiler-report-memory-line-format&lt;/code&gt; to a larger width (default 50 and 55).&lt;/span&gt;&lt;/p&gt;&lt;hr/&gt;&lt;/div&gt;&lt;p&gt;Emacs's profiler reports have a fixed width, which makes debugging deeply nested function calls &lt;a href="https://emacs.stackexchange.com/questions/7344/make-profiler-report-columns-wider"&gt;difficult&lt;/a&gt;.&lt;/p&gt;&lt;div class="image"&gt;&lt;p&gt;&lt;img src="/static/emacs-26.2-profiler.png" style="max-width:100%;" class=""/&gt;&lt;/p&gt;&lt;p class="image-caption"&gt;truncated at column 29&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Ideally the columns would be resized along with the window, or perhaps &lt;a href="https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/profiler.el?h=emacs-26" class="emacs-source"&gt;&lt;code&gt;profiler.el&lt;/code&gt;&lt;/a&gt; should define its formatting variables with &lt;code&gt;defcustom&lt;/code&gt;. Either way, it is still relatively easy to change the format.&lt;/p&gt;&lt;p&gt;The formatting is stored in two variables, &lt;code&gt;profiler-report-cpu-line-format&lt;/code&gt; and &lt;code&gt;profiler-report-memory-line-format&lt;/code&gt;. They're not documented, but through a bit of guesswork it happens that their &lt;code&gt;caar&lt;/code&gt; is the width value.&lt;/p&gt;&lt;p&gt;In &lt;a href="https://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/profiler.el?h=emacs-26#n446" class="emacs-source"&gt;&lt;code&gt;profiler.el&lt;/code&gt;&lt;/a&gt; (comments added):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;profiler-report-cpu-line-format&lt;/span&gt;
   &lt;span class="c1"&gt;;; ↓ this&lt;/span&gt;
   &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;profiler-report-memory-line-format&lt;/span&gt;
   &lt;span class="c1"&gt;;; ↓ this&lt;/span&gt;
   &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="nv"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt; &lt;span class="nv"&gt;profiler-format-number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nv"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;To change the width of lines in the profiler report, simply set these to what you want.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;caar&lt;/span&gt; &lt;span class="nv"&gt;profiler-report-cpu-line-format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;caar&lt;/span&gt; &lt;span class="nv"&gt;profiler-report-memory-line-format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And here is a minor mode to do it:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7
 8
 9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;profiler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;define-minor-mode&lt;/span&gt; &lt;span class="nv"&gt;kisaragi/profiler-wide-mode&lt;/span&gt;
   &lt;span class="s"&gt;"Minor mode to widen profiler reports."&lt;/span&gt;
   &lt;span class="nb"&gt;:global&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;kisaragi/profiler-wide-mode&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;caar&lt;/span&gt; &lt;span class="nv"&gt;profiler-report-cpu-line-format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;caar&lt;/span&gt; &lt;span class="nv"&gt;profiler-report-memory-line-format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;caar&lt;/span&gt; &lt;span class="nv"&gt;profiler-report-cpu-line-format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;caar&lt;/span&gt; &lt;span class="nv"&gt;profiler-report-memory-line-format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div class="image"&gt;&lt;p&gt;&lt;img src="/static/emacs-26.2-profiler-width-80.png" style="max-width:100%;" class=""/&gt;&lt;/p&gt;&lt;p class="image-caption"&gt;not truncated even at column 37&lt;/p&gt;&lt;/div&gt;&lt;p&gt;I'm sure there are ways to make the width update when Emacs is resized, but IMO that should be implemented inside &lt;code&gt;profiler.el&lt;/code&gt; itself, not as an extension. For now, this is a good enough workaround for me.&lt;/p&gt;&lt;p&gt;This is a solution to &lt;a href="https://emacs.stackexchange.com/questions/7344/make-profiler-report-columns-wider"&gt;this StackExchange question&lt;/a&gt;. Specifically, a comment there pointed out that &lt;code&gt;profiler-report&lt;/code&gt; mentions "width", which led me to find the relevant variables.&lt;/p&gt;</content></entry><entry><title type="text">My attempt at explaining closures</title><id>urn:https-kisaragi-hiu-com:blog-2019-05-15-closure-html</id><published>2019-05-15T18:16:51+08:00</published><updated>2019-05-15T18:16:51+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2019-05-15-closure.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;A closure is a function associated with a local, persistent, environment. It is a language feature — some languages attach local environments to functions, some languages don’t.&lt;/p&gt;&lt;p&gt;This lets functions keep a persistent state without using global variables.&lt;/p&gt;&lt;p&gt;To define a function that has persistent local variables in a language that supports this, create it in a local environment where you’d define these local variables. In Lisp family languages, this means a &lt;code&gt;lambda&lt;/code&gt; wrapped inside a &lt;code&gt;let&lt;/code&gt;: the local binding of that let will become part of the lambda’s environment.&lt;/p&gt;&lt;div class="tabbed"&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Scheme:&lt;/span&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;a-closure&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="c1"&gt;;; function created in environment where x = 10&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;set! &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;Emacs Lisp:&lt;/span&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;;; -*- lexical-binding: t; -*-&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defalias&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;a-closure&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="c1"&gt;;; function created in environment where x = 10&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
       &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;span&gt;JavaScript:&lt;/span&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7
 8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;// function created in environment where x = 10&lt;/span&gt;
   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;a_closure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;As far as &lt;code&gt;a_closure&lt;/code&gt; is concerned, &lt;code&gt;x&lt;/code&gt; might as well be a global variable. It is a persistent variable outside of the function that happens to only be accessible to the function.&lt;/p&gt;</content></entry><entry><title type="text">A Makefile for UTAU Projects</title><id>urn:https-kisaragi-hiu-com:blog-2019-04-17-utau-make-file-html</id><published>2019-04-17T19:50:52+08:00</published><updated>2019-04-17T19:50:52+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2019-04-17-utau-make-file.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;blockquote&gt;Edit 2019-05-24: Updated Makefile to generate file list automatically (line 2).&lt;/blockquote&gt;&lt;p&gt;I'm currently making a new cover using UTAU, after having broken the last streak of covers. This time, I thought I'd try using &lt;code class="command"&gt;make&lt;/code&gt; to help with rendering.&lt;/p&gt;&lt;p&gt;My biggest obstacle is automating the rendering itself: I don't know if UTAU has a command line interface, and using &lt;code class="command"&gt;xdotool&lt;/code&gt; proved to be too unreliable when I tried. (It was frustrating.)&lt;/p&gt;&lt;div class="tweet"&gt;&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;How do I render a UST from the command line…&lt;/p&gt;—如月飛羽🌈 (@flyin1501)&lt;a href="https://twitter.com/flyin1501/status/1116410591747305472"&gt;2019年4月11日&lt;/a&gt;&lt;/blockquote&gt;&lt;script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/div&gt;&lt;p&gt;As it turned out, automating the rest of the rendering process is still really helpful. Here is the Makefile for UTAU projects&lt;a id="ref-1" href="#ref-desc-1"&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7
 8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;UTAU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; env &lt;span class="nv"&gt;WINEPREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/kisaragi-hiu/.wineprefix/UTAU wine &lt;span class="s2"&gt;"C:\\Program Files (x86)\\UTAU\\utau.exe"&lt;/span&gt;
 &lt;span class="nv"&gt;WAV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;patsubst %.ust,%.wav,&lt;span class="k"&gt;$(&lt;/span&gt;wildcard *.ust&lt;span class="k"&gt;))&lt;/span&gt;

 &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;WAV&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
 &lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;

 &lt;span class="nf"&gt;$(WAV)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;wav&lt;/span&gt;: %.&lt;span class="n"&gt;ust&lt;/span&gt;
         &lt;span class="k"&gt;$(&lt;/span&gt;UTAU&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;realpath $&amp;lt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Which simply runs &lt;code&gt;$(UTAU) &amp;lt;ust full path&amp;gt;&lt;/code&gt; for each UST that's newer than its corresponding output file. The caveat here is that the UST needs to share its name with its output, which has to be set manually.&lt;/p&gt;&lt;p&gt;Now when I run &lt;code&gt;make render&lt;/code&gt;, UTAU windows will pop up one by one for me to manually do the render&lt;a id="ref-2" href="#ref-desc-2"&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;. This may not be quite automatic, but it's at least better than manually opening every UST in the project and rendering them.&lt;/p&gt;&lt;div id="references"&gt;&lt;p class="ref-desc" id="ref-desc-1"&gt;[&lt;a class="ref-desc-id" href="#ref-1"&gt;1&lt;/a&gt;] References used: &lt;a href="https://learnxinyminutes.com/docs/make/"&gt;Learn X in Y minutes&lt;/a&gt;, &lt;a href="https://medium.freecodecamp.org/eec453adf7fe"&gt;Use `make`! by freeCodeCamp&lt;/a&gt;, and &lt;a href="https://www.gnu.org/software/make/manual/html_node/File-Name-Functions.html"&gt;File Name Functions in the manual&lt;/a&gt;.&lt;/p&gt;&lt;p class="ref-desc" id="ref-desc-2"&gt;[&lt;a class="ref-desc-id" href="#ref-2"&gt;2&lt;/a&gt;] &lt;kbd&gt;Alt-p g RET&lt;/kbd&gt; if the output file name has been set.&lt;/p&gt;&lt;/div&gt;</content></entry><entry><title type="text">systemd units to kill a daemon on loop</title><id>urn:https-kisaragi-hiu-com:blog-2019-04-13-systemd-timer-tracker-store-html</id><published>2019-04-13T13:30:20+08:00</published><updated>2019-04-13T13:30:20+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2019-04-13-systemd-timer-tracker-store.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;&lt;code&gt;tracker-store&lt;/code&gt; leaks memory on my system, and after approximately 1 day of uptime, it'll leak everything and send my system into a lockup. The kernel out-of-memory (OOM) killer isn't going to do anything, and I'm not sure if &lt;code&gt;earlyoom&lt;/code&gt; is going to help either. This means the simplest solution is just going to be:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   pkill tracker-store
   sleep 3h
 &lt;span class="k"&gt;done&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;If I had to do this with Firefox or Chrome, this would be a bit too extreme, but since &lt;code&gt;tracker-store&lt;/code&gt; is only supposed to run in the background anyway, I don't mind (or care) if it's getting killed.&lt;/p&gt;&lt;p&gt;So, also wanting to learn systemd timers, I wrote a timer that does what the above script does.&lt;/p&gt;&lt;p&gt;The service file (&lt;path&gt;~/.config/systemd/user/kill-tracker.service&lt;/path&gt;) that the timer will fire:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Unit]
 Description=Kill tracker-store

 [Service]
 Type=oneshot
 ExecStart=/usr/bin/pkill tracker-store
 SuccessExitStatus=0 1
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Exit status 1 from pkill means the process couldn't be found.&lt;/p&gt;&lt;p&gt;The timer (&lt;path&gt;~/.config/systemd/user/kill-tracker.timer&lt;/path&gt;):&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7
 8
 9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Unit]
 Description=Kill tracker-store

 [Timer]
 OnBootSec=15min
 OnUnitActiveSec=4h

 [Install]
 WantedBy=timers.target
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Then run &lt;code&gt;systemctl --user enable --now kill-tracker.timer&lt;/code&gt; to enable and start the timer.&lt;/p&gt;</content></entry><entry><title type="text">Lookup Cangjie encoding in Emacs with cangjie.el</title><id>urn:https-kisaragi-hiu-com:blog-2019-01-21-cangjie-el-html</id><published>2019-01-21T19:43:47+09:00</published><updated>2019-01-21T19:43:47+09:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2019-01-21-cangjie.el.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;In August 2018, I wanted to start learning &lt;a href="https://en.wikipedia.org/wiki/Cangjie_input_method"&gt;Cangjie input method&lt;/a&gt;, but I didn't know of an easy way to look up the encoding for particular characters. Up to this point I had been using Chinese Wiktionary, which contains the encoding in the pages about individual characters.&lt;/p&gt;&lt;h1 id="g1564"&gt;&lt;code&gt;curl Wiktionary | grep "仓颉"&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Getting that data from Wiktionary is simple: &lt;code&gt;curl "https://zh.wiktionary.org/wiki/&amp;lt;character&amp;gt;" | grep "仓颉"&lt;/code&gt;. I initially had this saved as a shell script, but as I use Emacs a lot, I wanted to have the function available in Emacs. The &lt;code&gt;cangjie&lt;/code&gt; function receives the character and passes it to the pipeline, written in Emacs Lisp with &lt;a href="https://github.com/magnars/dash.el"&gt;&lt;code&gt;dash.el&lt;/code&gt;&lt;/a&gt;’s threading macro.&lt;/p&gt;&lt;p&gt;This approach has a problem. Even though most Wiktionary pages do contain the information I need, that’s not guaranteed in any way. Plus, reaching for a server everytime I want to look up a character means it’s going to be slow. So I wanted to look for a Cangjie dictionary, and the best option that came to mind was to use the dictionary from &lt;a href="https://rime.im/"&gt;RIME&lt;/a&gt;.&lt;/p&gt;&lt;h1 id="g1565"&gt;Using RIME’s Cangjie dictionary&lt;/h1&gt;&lt;p&gt;RIME is an &lt;a href="https://en.wikipedia.org/wiki/Input_method"&gt;IME&lt;/a&gt; for Chinese languages. It has built-in support for Cangjie (all Han characters), Pinyin, Zhuyin (Mandarin), Jyutping (Cantonese), among other input methods. For my use case, it has a Cangjie dictionary &lt;a href="https://github.com/rime/rime-cangjie" class=""&gt;available on GitHub&lt;/a&gt; that uses a much more stable format than Wiktionary entries.&lt;/p&gt;&lt;p&gt;The first version I committed to the &lt;a href="https://github.com/kisaragi-hiu/cangjie.el" class=""&gt;cangjie.el repository&lt;/a&gt; already had both of these approaches; in this version, which approach to use is controlled by whether a valid RIME dictionary exists or not.&lt;/p&gt;&lt;p&gt;RIME dictionaries (&lt;a href="https://github.com/rime/home/wiki/RimeWithSchemata#%E7%A2%BC%E8%A1%A8%E8%88%87%E8%A9%9E%E5%85%B8"&gt;official documentation&lt;/a&gt;) are &lt;code&gt;\t&lt;/code&gt;-seperated values with a YAML header in front, using # as the comment character. To get the Cangjie encoding for a character from the dictionary, we grab the lines matching the character, remove any matches starting with a #, then select the second element delimited by &lt;code&gt;\t&lt;/code&gt;. This encoding is written in the alphabetical representation of the Cangjie code (like &lt;code&gt;jnd&lt;/code&gt;), so we convert that to the Han character representation (like &lt;code&gt;十弓木&lt;/code&gt;), implemented with &lt;code&gt;cangjie--abc-to-han&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;cangjie&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;han&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="s"&gt;"Retrieve Cangjie code for the HAN character."&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;cangjie--valid-rime-dict?&lt;/span&gt; &lt;span class="nv"&gt;cangjie-source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="c1"&gt;;; take cangjie encoding from RIME dictionary&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cangjie--grep-line&lt;/span&gt; &lt;span class="nv"&gt;cangjie-source&lt;/span&gt; &lt;span class="nv"&gt;han&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-prefix?&lt;/span&gt; &lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-join&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-split&lt;/span&gt; &lt;span class="s"&gt;"\t"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="nv"&gt;second&lt;/span&gt;
               &lt;span class="nv"&gt;cangjie--abc-to-han&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;cangjie-source&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;wiktionary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="c1"&gt;;; Try to extract encoding from grep&amp;#39;d wiktionary text&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command-to-string&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="s"&gt;"curl --silent https://zh.wiktionary.org/wiki/"&lt;/span&gt; &lt;span class="nv"&gt;han&lt;/span&gt;
                        &lt;span class="s"&gt;" | grep 仓颉"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-replace-regexp&lt;/span&gt; &lt;span class="s"&gt;"^.*："&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="nv"&gt;s-trim&lt;/span&gt;
               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;s-replace-regexp&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;.*&amp;gt;$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="nv"&gt;cangjie--abc-to-han&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;
          &lt;span class="c1"&gt;;; Fallback&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command-to-string&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="s"&gt;"curl --silent https://zh.wiktionary.org/wiki/"&lt;/span&gt; &lt;span class="nv"&gt;han&lt;/span&gt;
                   &lt;span class="s"&gt;" | grep 仓颉"&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;After this, I added code to automatically download the RIME dictionary, a customize option to control whether to use Wiktionary or RIME, and rewrote some code for taste. This is when I considered the package essentially complete.&lt;/p&gt;&lt;h1 id="g1566"&gt;Submitting to MELPA&lt;/h1&gt;&lt;p&gt;In October, I came across &lt;a href="https://spin.atomicobject.com/2016/05/27/write-emacs-package/"&gt;Take Your Emacs to the Next Level by Writing Custom Packages&lt;/a&gt;, where the author writes about their experience writing their first package. In particular, there’s a section about how they submitted their package onto MELPA, and it made me consider submitting to MELPA as well.&lt;/p&gt;&lt;p&gt;I’ve set up Flycheck a long time ago, and have generally always agreed with the warnings it gave me about docstrings and code style. After going through &lt;a href="https://github.com/melpa/melpa/blob/2c70b4f5d62fcd1df998af325342aa082c7e939d/CONTRIBUTING.org"&gt;MELPA’s official guide&lt;/a&gt; on submission, I opened a pull request and got accepted. It was a pleasant experience.&lt;/p&gt;</content></entry><entry><title type="text">A Pollen PDF template based on HTML, instead of LaTeX</title><id>urn:https-kisaragi-hiu-com:blog-2019-01-03-pollen-pdf-template-html</id><published>2019-01-03T03:50:00+08:00</published><updated>2019-01-03T03:50:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2019-01-03-pollen-pdf-template.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;blockquote&gt;Edit 2019-03-24: I forgot to mention that Chrom/ium adds a header and footer when printing to PDF from the command line. To work around this, set the top/bottom margin to 0, eg.:

 &lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;media&lt;/span&gt; &lt;span class="nt"&gt;print&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;
 &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 &lt;/div&gt;&lt;/blockquote&gt;&lt;p&gt;Pollen's manual has a &lt;a href="http://docs.racket-lang.org/pollen/fourth-tutorial.html#(part._.Adding_support_for_.P.D.F_output)"&gt;tutorial&lt;/a&gt; on how to make &lt;a href="http://docs.racket-lang.org/pollen/second-tutorial.html#%28part._tutorial-2._.Templates%29"&gt;templates&lt;/a&gt; for PDF. It first builds a LaTeX source file, then renders that with &lt;code class="command"&gt;pdflatex&lt;/code&gt;, then returns the bytes from the PDF, deleting the temporary files. The problem with this in my use case is that I don't use LaTeX, and would like a way to turn the HTML version of my pages into PDF. So far I had always manually rendered my pages in Firefox (my primary browser) or Chrome (offers a print preview), which I'd like to automate.&lt;/p&gt;&lt;p&gt;First was finding a programmable interface to render an HTML to PDF. I knew Chrom/ium has a &lt;code&gt;--print-to-pdf&lt;/code&gt; option, but initially I thought it's going to have unavoidable headers and footers. So I started working with &lt;a href="https://wkhtmltopdf.org/"&gt;&lt;code class="command"&gt;wkhtmltopdf&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h1 id="g1774"&gt;First version with &lt;code class="command"&gt;wkhtmltopdf&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;First we check for &lt;code class="command"&gt;wkhtmltopdf&lt;/code&gt;'s existance.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;find-executable-path&lt;/span&gt; &lt;span class="s2"&gt;"wkhtmltopdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;pdf-render&lt;/span&gt; &lt;span class="s2"&gt;"wkhtmltopdf missing"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Then we assemble the pagenode to render, then send it to &lt;code&gt;render-pagenodes&lt;/code&gt; to render. Using &lt;code&gt;render-pagenodes&lt;/code&gt; allows me to specify that I want to get HTML output.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="n"&gt;html-pagenode&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;symbol&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-replace&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;symbol-&amp;gt;string&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="sr"&gt;#rx"\\.pdf$"&lt;/span&gt; &lt;span class="s2"&gt;".html"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;render-pagenodes&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;root&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;html-pagenode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Lastly, we send the HTML to &lt;code class="command"&gt;wkhtmltopdf&lt;/code&gt;, telling it to output to stdout, and capture it with &lt;code&gt;with-output-to-bytes&lt;/code&gt;. (&lt;code&gt;(thunk ...)&lt;/code&gt; is shorthand for &lt;code&gt;(lambda () ...)&lt;/code&gt;.)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;with-output-to-bytes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;thunk&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s2"&gt;"wkhtmltopdf ~a -"&lt;/span&gt; &lt;span class="n"&gt;html-pagenode&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;The entire thing: &lt;a href="https://gist.github.com/kisaragi-hiu/47578b77677bf659982819125cc34df4" class=""&gt;gist:kisaragi-hiu/47578b77677bf659982819125cc34df4&lt;/a&gt;&lt;/p&gt;&lt;h2 id="g1775"&gt;&lt;code class="command"&gt;wkhtmltopdf&lt;/code&gt; troubles&lt;/h2&gt;&lt;p&gt;After getting the rendered PDF and printing them out, I found that the output from &lt;code class="command"&gt;wkhtmltopdf&lt;/code&gt; differed too much from what I get from either Firefox or Chrome. Some of the CSS I have didn't seem to work as well. I then realized Chrome's &lt;code&gt;--print-to-pdf&lt;/code&gt; option doesn't give me the headers and footers with the CSS I have, so I decided using Chrome was less trouble.&lt;/p&gt;&lt;p&gt;One problem with this is that Chrome has to output to a file, so I couldn't write to stdout to avoid using a temporary file, like I did with &lt;code class="command"&gt;wkhtmltopdf&lt;/code&gt;.&lt;/p&gt;&lt;h1 id="g1776"&gt;Second version with Chrome&lt;/h1&gt;&lt;p&gt;First we try to find the command for Chrome. The &lt;code&gt;error&lt;/code&gt; only runs when all above fails.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="n"&gt;chrome-executable&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;find-executable-path&lt;/span&gt; &lt;span class="s2"&gt;"chromium"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;find-executable-path&lt;/span&gt; &lt;span class="s2"&gt;"google-chrome-stable"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;find-executable-path&lt;/span&gt; &lt;span class="s2"&gt;"google-chrome-unstable"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;find-executable-path&lt;/span&gt; &lt;span class="s2"&gt;"google-chrome"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;find-executable-path&lt;/span&gt; &lt;span class="s2"&gt;"chrome"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="ss"&gt;pdf-render&lt;/span&gt; &lt;span class="s2"&gt;"chrome missing"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Let Racket handle making the temporary file for us. (Pardon my naming sense…)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="n"&gt;temp-output&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-temporary-file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;This is the same as before, except this time we call &lt;code&gt;system&lt;/code&gt; here and let it do its thing, suppressing its output with &lt;code&gt;void&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
  2
  3
  4
  5
  6
  7
  8
  9
 10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="n"&gt;html-pagenode&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;symbol&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-replace&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;symbol-&amp;gt;string&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="sr"&gt;#rx"\\.pdf$"&lt;/span&gt; &lt;span class="s2"&gt;".html"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;void&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;render-pagenodes&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;root&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;html-pagenode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;system&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="s2"&gt;"~a --headless --disable-gpu --print-to-pdf=~a ~a"&lt;/span&gt;
                   &lt;span class="n"&gt;chrome-executable&lt;/span&gt;
                   &lt;span class="n"&gt;temp-output&lt;/span&gt;
                   &lt;span class="n"&gt;html-pagenode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Returning the bytes has to be done last for some reason, so we capture the bytes in &lt;code&gt;output&lt;/code&gt;, delete the temporary file, then return &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file-&amp;gt;bytes&lt;/span&gt; &lt;span class="n"&gt;temp-output&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="n"&gt;◊&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;delete-file&lt;/span&gt; &lt;span class="n"&gt;temp-output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;◊output&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Full version: &lt;a href="https://gist.github.com/kisaragi-hiu/6062b66694a612fd6981f0afc4515b1e" class=""&gt;gist:kisaragi-hiu/6062b66694a612fd6981f0afc4515b1e&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title type="text">SynthesizerV hopes before trying it out</title><id>urn:https-kisaragi-hiu-com:blog-2018-11-04-synthv-hope-html</id><published>2018-11-04T00:37:50+08:00</published><updated>2018-11-04T00:37:50+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-11-04-synthv-hope.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;&lt;em&gt;(I initially posted this as &lt;a href="https://twitter.com/flyin1501/status/1031078524830932993"&gt;a Twitter thread&lt;/a&gt;. I then let it sit in a branch, unpushed, for almost three months. I've since tried SynthV; will put up my thoughts later.)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Before trying out #SynthV Technical Preview, I'm hoping for custom VB support, maybe even for UTAU ones.&lt;/p&gt;&lt;p&gt;A big reason why CeVIO never got as big as UTAU is because it's needlessly hard to make VBs for it (just like VOCALOID). People want to hear their favorite characters sing, not just to hear nicely tuned songs, but CeVIO only has one popular character: IA's sister. Whereas VOCALOID attracted companies to make many VBs for it and got many popular characters, CeVIO, being a newcomer, hasn't.&lt;/p&gt;&lt;p&gt;It's going to be hard for SynthV to get new and potentially popular characters if there is no custom VB support. (UTAU VB support could be a bonus, but I understand UTAU's VB format is not that simple.)&lt;/p&gt;</content></entry><entry><title type="text">Three versions of random-string</title><id>urn:https-kisaragi-hiu-com:blog-2018-10-08-random-string-picolisp-html</id><published>2018-10-08T20:52:35+08:00</published><updated>2018-10-08T20:52:35+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-10-08-random-string-picolisp.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;After I started using a password manager to generate my passwords, sometimes I want to do the same in the shell — not necessarily for passwords, but just a random alphanumeric string of a specified length can be useful sometimes.&lt;/p&gt;&lt;p&gt;The command would take just one argument as the length for the output string.&lt;/p&gt;&lt;p&gt;I wrote the &lt;a href="https://gitlab.com/kisaragi-hiu/dotfiles/commit/c5946b85625d0f10d93b0350f9a34a355293ea6d" class=""&gt;first version&lt;/a&gt; in Racket, then rewrote it in Common Lisp because Racket's startup speed makes it quite unsuitable for shell commands. I eventually rewrote it in Picolisp because it's available in Termux; it's quite a fascinating language.&lt;/p&gt;&lt;h1 id="g2191"&gt;the Racket version&lt;/h1&gt;&lt;p&gt;&lt;a href="https://gitlab.com/kisaragi-hiu/dotfiles/blob/ed9483a72adcc32ac8935a59f85b61b7e574240f/random-string.rkt" class=""&gt;&lt;code&gt;random-string.rkt&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Define all the characters that could be used — it's just hardcoded alphanumeric characters because this is my only use case. Here if the environment variable &lt;code&gt;CHARSET&lt;/code&gt; is set it would use that instead.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getenv&lt;/span&gt; &lt;span class="s2"&gt;"CHARSET"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="s2"&gt;"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;The main logic is just making a list of specified length, then choosing a random item (with &lt;code&gt;select-random-item&lt;/code&gt;  from the charset for each list item, converting the list into a string in the end.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select-random-item&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sequence-ref&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;random&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sequence-length&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random-string&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list-&amp;gt;string&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;λ&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select-random-item&lt;/span&gt; &lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-list&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;The last section is the entry point; when there are arguments passed into the script, take the 0th argument and pass it to &lt;code&gt;random-string&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;empty?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vector-&amp;gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;current-command-line-arguments&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;displayln&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random-string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;displayln&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vector-ref&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;current-command-line-arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h1 id="g2192"&gt;Common Lisp rewrite&lt;/h1&gt;&lt;p&gt;&lt;a href="https://gitlab.com/kisaragi-hiu/dotfiles/blob/ed9483a72adcc32ac8935a59f85b61b7e574240f/random-string.cl" class=""&gt;&lt;code&gt;random-string.cl&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The logic is almost exactly the same as the Racket version, though here I didn't bother with looking for the &lt;code&gt;CHARSET&lt;/code&gt; environment variable.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defvar&lt;/span&gt; &lt;span class="vg"&gt;*charset*&lt;/span&gt; &lt;span class="s"&gt;"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;One thing that surprised me initially is the existence of "random states". Learning about little things like this is exactly why I like writing simple scripts like this.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;select-random-item&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;elt&lt;/span&gt; &lt;span class="nv"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;random&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt; &lt;span class="nv"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="c1"&gt;;; create a newly randomly seeded random state&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-random-state&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Looking at this now, I probably should've written the Racket version with &lt;code&gt;sequence-map&lt;/code&gt; operating directly on a string.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;random-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;optional&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;len&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;string&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;select-random-item&lt;/span&gt; &lt;span class="vg"&gt;*charset*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-string&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Here I depend on CLISP by using &lt;code&gt;*args*&lt;/code&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;*args*&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;random-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parse-integer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;first&lt;/span&gt; &lt;span class="vg"&gt;*args*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;random-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h1 id="g2193"&gt;Writing the Picolisp version&lt;/h1&gt;&lt;p&gt;&lt;a href="https://gitlab.com/kisaragi-hiu/dotfiles/blob/5e39e6c94b2c4fd3c595e10280ce8a38284bd149/random-string" class=""&gt;&lt;code&gt;random-string&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;I first saw Picolisp because it is currently (as of 2018-10) the only Lisp family language packaged in Termux.&lt;/p&gt;&lt;p&gt;In Picolisp, command line arguments can't be accessed directly in the program. The interpreter itself processes arguments as files to load or functions to invoke. This becomes a problem when the whole point of the script is to be a shell command.&lt;/p&gt;&lt;p&gt;There are two ways around this: one is to simply wrap the whole thing into a shell script, and handle arguments there. That seemed unstatisfying to me (I don't know why now that I've realized how hacky this next solution is), so I went with a hack to bind the first command line argument to a variable in the script.&lt;/p&gt;&lt;p&gt;&lt;code&gt;pil&lt;/code&gt; reads command line arguments starting with a "-" as a function to run; or, more specifically, as a form to evaluate after wrapping it in parentheses. For example, &lt;code&gt;-bye&lt;/code&gt; runs &lt;code&gt;(bye)&lt;/code&gt; immediately, exiting the program; &lt;code&gt;-argv dummy len&lt;/code&gt; runs &lt;code&gt;(argv dummy len)&lt;/code&gt;  which binds the first command line argument to &lt;code&gt;dummy&lt;/code&gt; and second to &lt;code&gt;len&lt;/code&gt;  but those arguments are still going to be loaded as files.&lt;/p&gt;&lt;p&gt;If &lt;code&gt;pil&lt;/code&gt; sees an argument that's just a "-", it'll stop loading subsequent arguments as files. This would've been the solution: &lt;code&gt;pil -"argv dummy dummy len" random-string - 60&lt;/code&gt; would bind &lt;code&gt;dummy&lt;/code&gt; to "random-string", then to "-", then &lt;code&gt;len&lt;/code&gt; to "60", after which it'll load my script where &lt;code&gt;len&lt;/code&gt; is available. There's just one problem: I have to write this command in the shebang.&lt;/p&gt;&lt;p&gt;The shebang tells the kernel to pass this file to the specified program, like &lt;code&gt;#!/bin/bash&lt;/code&gt;  It can also pass an argument to the program, for instance, &lt;code&gt;#!/usr/bin/pulseaudio -nF&lt;/code&gt; in some PulseAudio config files. The problem is, it can only pass one argument: everything after the space in the shebang is passed to the program as $1 in shell notation. This means I can't pass another "-" argument to &lt;code&gt;pil&lt;/code&gt;&lt;/p&gt;&lt;p&gt;In the end, my shebang looks like &lt;code&gt;#!/usr/bin/pil -argv dummy len&lt;/code&gt;  bind the first argument (path to script) to &lt;code&gt;dummy&lt;/code&gt;  second argument to &lt;code&gt;len&lt;/code&gt;  &lt;code&gt;len&lt;/code&gt; isn't actually going to be loaded because &lt;code&gt;(bye)&lt;/code&gt; has been called before its loading starts.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;!/usr/bin/pil&lt;/span&gt; &lt;span class="nv"&gt;-argv&lt;/span&gt; &lt;span class="nv"&gt;dummy&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;
 &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;bit&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;hack&lt;/span&gt; &lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="nv"&gt;Picolisp&lt;/span&gt;&lt;span class="ss"&gt;&amp;#39;s&lt;/span&gt; &lt;span class="nv"&gt;loading&lt;/span&gt; &lt;span class="nv"&gt;mechanism&lt;/span&gt;
 &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;random-string&lt;/span&gt; &lt;span class="nv"&gt;[length]&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Here I have to seed the PRNG with current time before running &lt;code&gt;select-random-item&lt;/code&gt;  because I couldn't find a way to get time more accurate than seconds. If I seed it inside &lt;code&gt;select-random-item&lt;/code&gt;  it'd receive the same (fresh) seed and thus return the same character throughout the second.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;seed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="vg"&gt;*charset*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;chop&lt;/span&gt; &lt;span class="s"&gt;"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;de&lt;/span&gt; &lt;span class="nv"&gt;select-random-item&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nth&lt;/span&gt; &lt;span class="nv"&gt;seq&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rand&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt; &lt;span class="nv"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Picolisp doesn't have defaults for optional arguments, so I have to set it myself when the input is nil.&lt;/p&gt;&lt;p&gt;Another interesting thing about Picolisp is that it actually uses a list of form &lt;code&gt;((arg1 arg2 ...) body)&lt;/code&gt; as functions. Personally I think this is quite elegant, and would like to see more non-functions that are applicable like this in other Lisps as well. Allowing lists to be applicable like functions shouldn't break anything… I think.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2
 3
 4
 5
 6
 7
 8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;de&lt;/span&gt; &lt;span class="nv"&gt;random-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;str?&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mapcar&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;select-random-item&lt;/span&gt; &lt;span class="vg"&gt;*charset*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;prinl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;random-string&lt;/span&gt; &lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bye&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</content></entry><entry><title type="text">Getting started with Magit (Or what I hope I could've read when I first tried out Magit)</title><id>urn:https-kisaragi-hiu-com:blog-2018-09-20-magit-introduction-html</id><published>2018-09-20T23:57:41+08:00</published><updated>2018-09-20T23:57:41+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-09-20-magit-introduction.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;This is a quick guide for using &lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;, a wonderful Git interface based in Emacs. Its base features are fairly simple, but it can be confusing if you're not already using Emacs, as I was a few months ago.&lt;/p&gt;&lt;video muted="muted" autoplay="autoplay" src="/static/emacs-magit-typical-workflow.mp4" loop="loop" style="max-width:100%;" controls=""&gt;&lt;/video&gt;&lt;h1 id="g2401"&gt;The &lt;code&gt;magit&lt;/code&gt; command&lt;/h1&gt;&lt;p&gt;I'll explain Emacs basics in the last paragraph.&lt;/p&gt;&lt;p&gt;The stage / committing workflow with Magit is centered around an interactive version of &lt;code&gt;git status&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Call &lt;code&gt;magit&lt;/code&gt; in a git repository, ie. when you have a file or folder open in the repo. The window that pops up is that interactive &lt;code&gt;git status&lt;/code&gt;.&lt;/p&gt;&lt;video autoplay="autoplay" style="max-width:100%;" muted="muted" loop="loop" src="/static/emacs-magit-status.mp4"&gt;&lt;/video&gt;&lt;p&gt;Move the cursor onto a hunk and press &lt;kbd&gt;Tab&lt;/kbd&gt;. This toggles display of its contents. Press &lt;kbd&gt;s&lt;/kbd&gt; to stage, &lt;kbd&gt;u&lt;/kbd&gt; to unstage, &lt;kbd&gt;c&lt;/kbd&gt; for commit options, &lt;kbd&gt;F&lt;/kbd&gt; for pulling options, and &lt;kbd&gt;P&lt;/kbd&gt; for pushing options.&lt;/p&gt;&lt;p&gt;This alone, I feel, is many times faster than using &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git diff&lt;/code&gt;, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, etc. directly.&lt;/p&gt;&lt;p&gt;Pressing &lt;kbd&gt;Enter&lt;/kbd&gt; will visit the hunk under cursor.&lt;/p&gt;&lt;p&gt;Also check out other options in the "Magit" menu located in the menu bar, when you're in the Magit window.&lt;/p&gt;&lt;video autoplay="autoplay" style="max-width:100%;" muted="muted" loop="loop" src="/static/emacs-magit-quick-workflow.mp4"&gt;&lt;/video&gt;&lt;h1 id="g2402"&gt;Setting up Magit (and Emacs)&lt;/h1&gt;&lt;p&gt;If you have an Emacs configuration already, just install Magit from MELPA and ignore this.&lt;/p&gt;&lt;p&gt;This will introduce Emacs package management with &lt;code&gt;use-package&lt;/code&gt;, in a way that I think is easier to maintain.&lt;/p&gt;&lt;p&gt;Edit the file &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;, then type this into it:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;;; load packages ourselves&lt;/span&gt;
 &lt;span class="c1"&gt;;; press C-h v on the variable for more documentation&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;;; Add MELPA to package-archives&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-archives&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"melpa"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"https://melpa.org/packages/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="c1"&gt;;; load packages now&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="c1"&gt;;; Emacs adds `custom&amp;#39; settings in the init file by default. Run this file&lt;/span&gt;
 &lt;span class="c1"&gt;;; without this segment to see what that means.&lt;/span&gt;
 &lt;span class="c1"&gt;;; Put those away in "custom.el".&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;custom-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;user-emacs-directory&lt;/span&gt; &lt;span class="s"&gt;"custom.el"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;custom-file&lt;/span&gt; &lt;span class="nb"&gt;:noerror&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="c1"&gt;;; update local database then install use-package if it&amp;#39;s not installed&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;use-package&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;;; tell use-package to install a package if it&amp;#39;s not already installed&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;use-package-always-ensure&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Then install Magit and set a keyboard shortcut to invoke it:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
 2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;magit&lt;/span&gt;
   &lt;span class="nb"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"C-x g"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;magit&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Read more about Magit in its manual. &lt;a href="https://magit.vc/manual/magit/"&gt;https://magit.vc/manual/magit/&lt;/a&gt;&lt;/p&gt;&lt;h1 id="g2403"&gt;Emacs basics&lt;/h1&gt;&lt;p&gt;The mouse can be used for selection or moving the cursor around, like other editors. Typing something with an active selected region by default does not replace the text; to enable the expected behavior, add &lt;code&gt;(delete-selection-mode 1)&lt;/code&gt; to your init file. A selected region is just called a "region" in Emacs.&lt;/p&gt;&lt;p&gt;Arrow keys work as expected, and you can explore other more efficient movement keys in the Emacs tutorial; start it with &lt;kbd&gt;C-h t&lt;/kbd&gt;, or run &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;help-with-tutorial&lt;/code&gt;.&lt;/p&gt;</content></entry><entry><title type="text">UTAU tip: labels</title><id>urn:https-kisaragi-hiu-com:blog-2018-07-27-utau-tip-labels-html</id><published>2018-07-27T00:23:19+08:00</published><updated>2018-07-27T00:23:19+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-07-27-utau-tip-labels.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;In UTAU, labels are a simple way to mark sections of the UST to easily jump around. I&amp;rsquo;ve been using them to make notes in the UST since &lt;a href="https://www.youtube.com/watch?v=PNLT7WUuXHM"&gt;my メリュー cover&lt;/a&gt;, and for marking sections since &lt;a href="https://www.youtube.com/watch?v=3hnI8DqMVfc"&gt;my 濫觴生命 cover&lt;/a&gt;.&lt;/p&gt;&lt;div class="image"&gt;&lt;p&gt;&lt;img src="/static/utau/screenshot-labels.png" style="max-width:100%;" class=""/&gt;&lt;/p&gt;&lt;p class="image-caption"&gt;Labels marking sections.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;For some reason, I&amp;rsquo;ve never seen a UST with section marks, even though I think they&amp;rsquo;re quite helpful.&lt;/p&gt;&lt;p&gt;Label is a note property, this makes it useful for marking specific notes as well.&lt;/p&gt;&lt;h2 id="using-labels"&gt;Using labels&lt;/h2&gt;&lt;p&gt;Right click on the top line where the bar numbers are, then select &lt;code&gt;Set Label Here&lt;/code&gt;.&lt;/p&gt;&lt;div class="image"&gt;&lt;img src="/static/utau/screenshot-labels-set.png" style="max-width:100%;" class=""/&gt;&lt;/div&gt;&lt;p&gt;To remove or change a label, right click on it again then select the appropriate option.&lt;/p&gt;&lt;p&gt;To jump to a label, right click on the top line, select &lt;code&gt;Move&lt;/code&gt;, then choose the label to jump to.&lt;/p&gt;&lt;div class="image"&gt;&lt;p&gt;&lt;img src="/static/utau/screenshot-labels-change.png" style="max-width:100%;" class=""/&gt;&lt;/p&gt;&lt;p class="image-caption"&gt;Move, Change label, and Remove label.&lt;/p&gt;&lt;/div&gt;&lt;h2 id="example"&gt;Example&lt;/h2&gt;&lt;div class="image"&gt;&lt;p&gt;&lt;img src="/static/utau/screenshot-labels-usage.png" style="max-width:100%;" class=""/&gt;&lt;/p&gt;&lt;p class="image-caption"&gt;My labels usage in the 濫觴生命 cover.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;In this UST I&amp;rsquo;ve named various sections with labels (Intro, Verse, etc.) so I can easily jump to them. I also have a few labels marking specific notes, for instance &lt;code&gt;here&lt;/code&gt; is what I use to mark my progress through the file, and &lt;code&gt;???&lt;/code&gt; probably marks some notes sounding weird.&lt;/p&gt;</content></entry><entry><title type="text">UTAU Covering Experiment</title><id>urn:https-kisaragi-hiu-com:blog-2018-05-11-utau-tuning-experiment-html</id><published>2018-05-11T22:00:10+08:00</published><updated>2018-05-11T22:00:10+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-05-11-utau-tuning-experiment.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;Back in March, I started getting back into doing UTAU covers, and have tried to finish one cover within two weeks. I&amp;rsquo;m so far happy with the results, although it is taking up too much of my attention.&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve done this sort of experimental “metaprojects” in the past, where I try to put more effort into a specific subject. Last March I tried to get better at osu! which has so far turned out ok (I&amp;rsquo;m at least actually improving), and I tried to practice singing last year, releasing several covers with my own voice.&lt;/p&gt;&lt;p&gt;The singing experiment last year ended pretty much as a failure, with only six covers released overall (so it wasn&amp;rsquo;t even frequent), and my voice never improved during that time. I realized that I need to practice my voice, and that I do not have an environment that I&amp;rsquo;m comfortable to practice in. I decided to put it aside for now (I can pick it up in the future with more effort, if I want), and focus somewhere else instead.&lt;/p&gt;&lt;p&gt;So starting with &lt;a href="https://youtu.be/npl4XY7CwK4"&gt;my cover of SHIRO&lt;/a&gt; in March, I started finding more songs to cover and trying out Yamine Renri&amp;rsquo;s variants. While covering SHIRO, I tried to utilize Moresampler&amp;rsquo;s flags (specifically &lt;code&gt;Mt&lt;/code&gt;), which turned out pretty decent. With the next cover, &lt;a href="https://youtu.be/DpOt7wi-P7E"&gt;This Earth, for You ft. Yamine Renri&lt;/a&gt;, I tried to put as much emotion into it as I can, utilizing Renri&amp;rsquo;s variants and Moresampler&amp;rsquo;s flags together, and I think it turned out alright. One big issue was my use of breath sounds — this cover was actually the first time I attached breath-in sounds to a cover, and I kind of screwed that up by making them too audible.&lt;/p&gt;&lt;p&gt;The thing is, the This Earth, for You cover was done within 2 weeks, a time I previously thought incredibly hard to achieve for an UTAU cover. My past covers always took somewhere between a month and close to a year, and I hadn&amp;rsquo;t tried to, well, actually work on a project throughout an entire week. I had always worked on them for a few hours, and let them sit there for weeks. The covers I&amp;rsquo;ve done this year have all taken less than 2 weeks, yet to some degree good enough (to let me improve) for me.&lt;/p&gt;&lt;p&gt;So I think this UTAU covering experiment is successful so far. I still have plenty of things I want to learn, like actually composing my own songs and drawing, so putting all my efforts into releasing an UTAU cover every two weeks isn&amp;rsquo;t the best choice for me, but so far I&amp;rsquo;m pretty happy with it.&lt;/p&gt;</content></entry><entry><title type="text">Introduction to Two Factor Authorization</title><id>urn:https-kisaragi-hiu-com:blog-2018-04-08-2fa-introduction-html</id><published>2018-04-08T19:38:06+09:00</published><updated>2018-04-08T19:38:06+09:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-04-08-2fa-introduction.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;Two factor authorization (2FA) in online accounts is a strong way to limit account access. It involves a website (a point of access control) and a client (like Google Authenticator, FreeOTP, and others).&lt;/p&gt;&lt;p&gt;When setting up 2FA, you store a randomly generated text (I&amp;rsquo;ll call it the token) in the 2FA client.&lt;/p&gt;&lt;p&gt;Both the website and the 2FA client will derive a 6-digit code from the token and the current time. When they share the same token and agree with the current time, the code will be the same. This is done so you can type in a 6-digit code while keeping the difficulty in guessing a long string of random text.&lt;/p&gt;&lt;p&gt;When logging in, the website will ask for the password, as before, and the derived code. If one of the two isn&amp;rsquo;t known, access will not be permitted. This adds an extra layer of security to crack, like adding an extra lock onto your door.&lt;/p&gt;&lt;p&gt;In practice, this means:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Telling the website you want to setup 2FA. It should give you the token or a QR code.&lt;/li&gt;&lt;li&gt;Scan the QR code or enter the token into a 2FA client, like Google Authenticator.&lt;/li&gt;&lt;li&gt;The 2FA client generates the 6-digit code, which you enter into the website to confirm you now have the token.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And when logging in:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log into your account as usual.&lt;/li&gt;&lt;li&gt;When the website asks for it, give it the 6-digit code.&lt;/li&gt;&lt;li&gt;Website confirms you have both the token and password, and gives you access.&lt;/li&gt;&lt;/ul&gt;</content></entry><entry><title type="text">Making up a language from Hanezeve Caradhina, "Day 5"</title><id>urn:https-kisaragi-hiu-com:blog-2018-03-11-hanezeve-final-html</id><published>2018-03-11T21:24:47+08:00</published><updated>2018-03-11T21:24:47+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-03-11-hanezeve-final.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;After putting this aside for three months, I finally spent another few minutes thinking what the last line can mean.&lt;/p&gt;&lt;p&gt;The B section:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Holo-ohlo holo forðe holo  Helelele lelele  colwelela kalalila let the journey begin Hanezeve yulumai-ni to the bottom of the Abyss&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="come-come"&gt;Come, come&lt;/h2&gt;&lt;p&gt;Starting off from the part that&amp;rsquo;s harder to break apart, I&amp;rsquo;m seeing &amp;ldquo;Helelele lelele&amp;rdquo; as one word or just one gesture (maybe similar to dokidoki in Japanese). Its repetitiveness to me sounds like some kind of invitation, which leads to &amp;ldquo;let the journey begin&amp;rdquo;. Let&amp;rsquo;s just say it does mean that, then I can translate it into something like &amp;ldquo;come, come&amp;rdquo; in English.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Helelele…: &lt;em&gt;Come…&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;Halalaha zela halalelu
 =&amp;gt; (thought-fiction = dream) I (thought-make = imagine)
 =&amp;gt; I am dreaming a dream&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;The first sentence in section A.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Now the first sentence in B. Carrying the structure I established in section A, the second &amp;ldquo;holo&amp;rdquo; in &amp;ldquo;Holo-ohlo holo forðe-holo&amp;rdquo; should be a pronoun. With the next sentence being an invitational gesture, this one should be about something inviting someone.&lt;/p&gt;&lt;p&gt;This invitation obviously has to be towards the Abyss, since the character in the song answered it by starting a journey that way. So one of holo-ohlo and forðe-holo has to mean &amp;ldquo;towards the Abyss&amp;rdquo;.&lt;/p&gt;&lt;p&gt;Putting that aside for a bit, focusing on the word &amp;ldquo;holo&amp;rdquo;: if &amp;ldquo;holo&amp;rdquo; is a pronoun, the only sensible entity that would do the &amp;ldquo;invitation&amp;rdquo; is the Abyss itself, or a God of the Abyss. According to what Nanachi said [ep13], the religion of the Abyss does not involve another entity that represents the Abyss, therefore &amp;ldquo;holo&amp;rdquo; should mean &amp;ldquo;the Abyss&amp;rdquo;.&lt;/p&gt;&lt;p&gt;But why not &amp;ldquo;Hanezeve&amp;rdquo;? I&amp;rsquo;m thinking maybe &amp;ldquo;holo&amp;rdquo; can mean &amp;ldquo;it&amp;rdquo;, albeit in a holy form. I&amp;rsquo;m borrowing this idea from the Mandarin word &amp;ldquo;祂&amp;rdquo;, which is exactly &amp;ldquo;it&amp;rdquo; for gods.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;holo: modifier, &amp;ldquo;holy&amp;rdquo;, &amp;ldquo;Abyss&amp;rdquo;, and/or &amp;ldquo;itself&amp;rdquo;; pronoun, it (holy form, like &amp;ldquo;祂&amp;rdquo; in Mandarin)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now each of &amp;ldquo;holo-ohlo&amp;rdquo; and &amp;ldquo;forðe-holo&amp;rdquo; has to mean either &amp;ldquo;invite&amp;rdquo; or &amp;ldquo;towards-abyss&amp;rdquo; / &amp;ldquo;towards-itself&amp;rdquo;. Following the structure of &amp;ldquo;cara-dhina&amp;rdquo; = &amp;ldquo;in-deep&amp;rdquo;, I think &amp;ldquo;forðe-holo&amp;rdquo; is more suited for &amp;ldquo;towards-itself&amp;rdquo;, with the preposition in front. Then &amp;ldquo;holo-ohlo&amp;rdquo; would be something like &amp;ldquo;holy-invite&amp;rdquo;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;holo-ohlo: holy-invite&lt;/li&gt;&lt;li&gt;forðe-holo: towards-abyss or towards-itself&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So the rough translation is now:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A. I am dreaming a dream to explore even deeper the treasures, the wonder Deep in the Abyss&lt;/p&gt;&lt;p&gt;B. &lt;em&gt;It&lt;/em&gt; (or the Abyss) is inviting us (towards itself) &amp;ldquo;Come, come&amp;rdquo; Let the journey begin to the bottom of the Abyss&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="full-translation-with-made-up-language-and-grammar"&gt;Full &amp;ldquo;translation&amp;rdquo; with made-up language and grammar&lt;/h2&gt;&lt;h3 id="hanezeve-caradhina--deep-in-the-abyss"&gt;Hanezeve Caradhina / Deep in the Abyss&lt;/h3&gt;&lt;div style="display:flex"&gt;&lt;span&gt;&lt;blockquote&gt;&lt;pre&gt;
 A.
 Halalaha zela halalelu
 Sivivile shi-dhina
 houwelela, walelila
 Hanezeve cara-dhina

 B.
 holo-ohlo holo forðe-holo
 helelele lelele
 colwelela kalalila
 Hanezeve yulumai-ni

 A.
 Halalaha zela halalelu
 Sivivile shi-dhina
 houwelela, walelila
 Hanezeve cara-dhina

 'B.
 holo-ohlo holo forðe-holo
 helelele lelele
 colwelelo kalalila
 Hanezeve yulumai-ni

 A.
 Halalaha zela halalelu
 Sivivile shi-dhina
 houwelela, walelila
 Hanezeve cara-dhina
 &lt;/pre&gt;&lt;/blockquote&gt;&lt;/span&gt; &lt;span&gt;&lt;blockquote&gt;&lt;pre&gt;
 A.
 I am dreaming a dream
 to explore even deeper
 the treasures, the wonder
 Deep in the Abyss

 B.
 The Abyss is inviting us
 "Come, come, come"
 So let's begin the journey
 to the bottom of the Abyss

 A.
 I am dreaming a dream
 to explore even deeper
 the treasures, the wonder
 Deep in the Abyss

 'B.
 The Abyss is inviting us
 "Come, come, come"
 So let's continue the journey
 to the bottom of the Abyss

 A.
 I am dreaming a dream
 to explore even deeper
 the treasures, the wonder
 Deep in the Abyss
 &lt;/pre&gt;&lt;/blockquote&gt;&lt;/span&gt;&lt;/div&gt;&lt;p&gt;Listen to Hanezeve Caradhina (and the rest of the Made in Abyss OST) &lt;a href="https://open.spotify.com/album/5oEzjkSYSfC0ITRiqK6m8l"&gt;on Spotify.&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title type="text">Switching to .pam_environment for environment variables</title><id>urn:https-kisaragi-hiu-com:blog-2018-02-25-pam-env-html</id><published>2018-02-25T21:34:45+08:00</published><updated>2018-02-25T21:34:45+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-02-25-pam_env.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;The past month my system environment was in quite a mess.&lt;/p&gt;&lt;p&gt;I used to put my environment variables in &amp;rsquo;(filepath "~/.profile"). However, one day, the file simply stopped being sourced. I tried to switch my display manager from sddm, to gdm, then to lightdm, to no avail. I know sourcing a file on login is somewhat insecure, and &amp;rsquo;(filepath "~/.pam_environment") is probably the right way going forward, so I started moving variables into it.&lt;/p&gt;&lt;h2 id="preprocessing-pamenvironment"&gt;Preprocessing .pam_environment&lt;/h2&gt;&lt;p&gt;I had a piece of code in my &amp;rsquo;(filepath "~/.profile") that checks Racket and Ruby&amp;rsquo;s versions and sets the PATH to point to &lt;code&gt;raco&lt;/code&gt; and &lt;code&gt;gem&lt;/code&gt;&amp;lsquo;s bin directory. Now, &amp;rsquo;(filepath "~/.pam_environment") can&amp;rsquo;t do that, so I wrote a Pollen version of the file and rendered / compiled it into the final &amp;rsquo;(filepath "~/.pam_environment").&lt;/p&gt;&lt;p&gt;&amp;rsquo;(div ((class &amp;ldquo;highlight&amp;rdquo;)) (table ((class &amp;ldquo;sourcetable&amp;rdquo;)) (tbody (tr (td ((class &amp;ldquo;linenos&amp;rdquo;)) (div ((class &amp;ldquo;linenodiv&amp;rdquo;)) (pre " 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36"))) (td ((class &amp;ldquo;code&amp;rdquo;)) (div ((class &amp;ldquo;source&amp;rdquo;)) (pre (span) (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;define&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;defpam_env&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;name&amp;rdquo;) " " (span ((class &amp;ldquo;o&amp;rdquo;)) ".") " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;contents&amp;rdquo;) (span ((class &amp;ldquo;p&amp;rdquo;)) ")") "\n " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;define&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;content&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;string-join&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;contents&amp;rdquo;) " " (span ((class &amp;ldquo;s2&amp;rdquo;)) """ """) (span ((class &amp;ldquo;p&amp;rdquo;)) "))") "\n " (span ((class &amp;ldquo;n&amp;rdquo;)) "◊string-append") (span ((class &amp;ldquo;p&amp;rdquo;)) "{") (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|name|") " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;DEFAULT=◊|content|&amp;rdquo;) (span ((class &amp;ldquo;p&amp;rdquo;)) "})") "\n\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;define&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;pathlist-string&amp;rdquo;) " " (span ((class &amp;ldquo;o&amp;rdquo;)) ".") " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;args&amp;rdquo;) (span ((class &amp;ldquo;p&amp;rdquo;)) ")") "\n " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;string-join&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;string-split&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;string-join&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;args&amp;rdquo;) " " (span ((class &amp;ldquo;s2&amp;rdquo;)) """ """) (span ((class &amp;ldquo;p&amp;rdquo;)) ")") " " (span ((class &amp;ldquo;s2&amp;rdquo;)) """) (span ((class &amp;ldquo;se&amp;rdquo;)) "\n") (span ((class &amp;ldquo;s2&amp;rdquo;)) """) (span ((class &amp;ldquo;p&amp;rdquo;)) ")") " " (span ((class &amp;ldquo;s2&amp;rdquo;)) """ ":" """) (span ((class &amp;ldquo;p&amp;rdquo;)) "))") "\n\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;define&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;racket-version&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;version&amp;rdquo;) (span ((class &amp;ldquo;p&amp;rdquo;)) "))") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;define&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;ruby-version&amp;rdquo;) "\n " (span ((class &amp;ldquo;c1&amp;rdquo;)) "; this, or sed | cut? I don" 39 &amp;ldquo;t know which I prefer really.&amp;rdquo;) "\n " (span ((class &amp;ldquo;p&amp;rdquo;)) "((") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;compose1&amp;rdquo;) " " (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;first&amp;rdquo;) "\n " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;λ&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;n&amp;rdquo;)) "$1") (span ((class &amp;ldquo;p&amp;rdquo;)) ")") " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;string-split&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) "$1") " " (span ((class &amp;ldquo;s2&amp;rdquo;)) """ &amp;ldquo;p&amp;rdquo; """) (span ((class &amp;ldquo;p&amp;rdquo;)) "))") "\n " (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;second&amp;rdquo;) "\n " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;λ&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;n&amp;rdquo;)) "$1") (span ((class &amp;ldquo;p&amp;rdquo;)) ")") " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;string-split&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) "$1") " " (span ((class &amp;ldquo;s2&amp;rdquo;)) """ " " """) (span ((class &amp;ldquo;p&amp;rdquo;)) ")))") "\n " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;with-output-to-string&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;λ&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "()") " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;system&amp;rdquo;) " " (span ((class &amp;ldquo;s2&amp;rdquo;)) """ &amp;ldquo;ruby &amp;mdash;version&amp;rdquo; """) (span ((class &amp;ldquo;p&amp;rdquo;)) ")))))") "\n\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;c1&amp;rdquo;)) "; == directory shortcuts ==") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊defpam_env") (span ((class &amp;ldquo;p&amp;rdquo;)) "[") (span ((class &amp;ldquo;s2&amp;rdquo;)) """ &amp;ldquo;XDG_DESKTOP_DIR&amp;rdquo; """) (span ((class &amp;ldquo;p&amp;rdquo;)) "]{") (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|HOME|/デスクトップ") (span ((class &amp;ldquo;p&amp;rdquo;)) "}") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊defpam_env") (span ((class &amp;ldquo;p&amp;rdquo;)) "[") (span ((class &amp;ldquo;s2&amp;rdquo;)) """ &amp;ldquo;XDG_DOWNLOAD_DIR&amp;rdquo; """) (span ((class &amp;ldquo;p&amp;rdquo;)) "]{") (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|HOME|/ダウンロード") (span ((class &amp;ldquo;p&amp;rdquo;)) "}") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;c1&amp;rdquo;)) "; &amp;hellip;") "\n\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊defpam_env") (span ((class &amp;ldquo;p&amp;rdquo;)) "[") (span ((class &amp;ldquo;s2&amp;rdquo;)) """ &amp;ldquo;PATH&amp;rdquo; """) (span ((class &amp;ldquo;p&amp;rdquo;)) "]{") (span ((class &amp;ldquo;n&amp;rdquo;)) "◊pathlist-string") (span ((class &amp;ldquo;p&amp;rdquo;)) "{") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|HOME|/git/scripts") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|HOME|/git/Sudocabulary") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|HOME|/bin") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|HOME|/.racket/◊|racket-version|/bin") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|HOME|/.local/share/npm-global/bin") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|HOME|/.gem/ruby/◊|ruby-version|/bin") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "$◊") (span ((class &amp;ldquo;s2&amp;rdquo;)) """ "{" """) (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;PATH◊&amp;rdquo;) (span ((class &amp;ldquo;s2&amp;rdquo;)) """ "}" """) "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "/usr/bin") " " (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;c1&amp;rdquo;)) "; safety fallback") "\n" (span ((class &amp;ldquo;p&amp;rdquo;)) "}}") "\n\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;c1&amp;rdquo;)) "; &amp;hellip;") "\n\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊defpam_env") (span ((class &amp;ldquo;p&amp;rdquo;)) "[") (span ((class &amp;ldquo;s2&amp;rdquo;)) """ &amp;ldquo;VISUAL&amp;rdquo; """) (span ((class &amp;ldquo;p&amp;rdquo;)) "]{") (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;nvim&amp;rdquo;) (span ((class &amp;ldquo;p&amp;rdquo;)) "}") "\n" (span ((class &amp;ldquo;n&amp;rdquo;)) "◊defpam_env") (span ((class &amp;ldquo;p&amp;rdquo;)) "[") (span ((class &amp;ldquo;s2&amp;rdquo;)) """ &amp;ldquo;EDITOR&amp;rdquo; """) (span ((class &amp;ldquo;p&amp;rdquo;)) "]{") (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;nvim&amp;rdquo;) (span ((class &amp;ldquo;p&amp;rdquo;)) "}") "\n")) "\n")))) "\n")&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s really ugly, but it only has one job, which it does fine.&lt;/p&gt;&lt;h2 id="default-override-pamenv-what"&gt;DEFAULT? OVERRIDE? pam_env, what?&lt;/h2&gt;&lt;p&gt;All seemed well, until a few days later my PATH config isn&amp;rsquo;t taking effect anymore. For some reason, every other variable is properly set, just not PATH. Trying to see just exactly which file those variables came from, I noticed a variable that is only present in my &amp;rsquo;(filepath "~/.pam_environment"), telling me that it is indeed being read. I looked up info on PATH not being set with &amp;rsquo;(filepath ".pam_environment"), and found &lt;a href="https://superuser.com/questions/130135/why-doesnt-my-environment-variable-get-set"&gt;this StackExchange post&lt;/a&gt; hinting at something to do with the &lt;code&gt;var DEFAULT=value&lt;/code&gt; syntax.&lt;/p&gt;&lt;p&gt;Reading into pam_env&amp;rsquo;s documentation on the config format, it seems that &lt;code&gt;DEFAULT&lt;/code&gt; is intended to be used for, well, defaults that could be overridden. Changing it into OVERRIDE seems to tell pam_env to just use the value and don&amp;rsquo;t fiddle around.&lt;/p&gt;&lt;p&gt;&amp;rsquo;(div ((class &amp;ldquo;highlight&amp;rdquo;)) (table ((class &amp;ldquo;sourcetable&amp;rdquo;)) (tbody (tr (td ((class &amp;ldquo;linenos&amp;rdquo;)) (div ((class &amp;ldquo;linenodiv&amp;rdquo;)) (pre &amp;ldquo;1\n2\n3\n4&amp;rdquo;))) (td ((class &amp;ldquo;code&amp;rdquo;)) (div ((class &amp;ldquo;source&amp;rdquo;)) (pre (span) (span ((class &amp;ldquo;n&amp;rdquo;)) "◊") (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;define&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;defpam_env&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;name&amp;rdquo;) " " (span ((class &amp;ldquo;o&amp;rdquo;)) ".") " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;contents&amp;rdquo;) (span ((class &amp;ldquo;p&amp;rdquo;)) ")") "\n " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;k&amp;rdquo;)) &amp;ldquo;define&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;content&amp;rdquo;) " " (span ((class &amp;ldquo;p&amp;rdquo;)) "(") (span ((class &amp;ldquo;nb&amp;rdquo;)) &amp;ldquo;string-join&amp;rdquo;) " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;contents&amp;rdquo;) " " (span ((class &amp;ldquo;s2&amp;rdquo;)) """ """) (span ((class &amp;ldquo;p&amp;rdquo;)) "))") "\n " (span ((class &amp;ldquo;c1&amp;rdquo;)) "; DEFAULT -" "&amp;gt;" " OVERRIDE.") "\n " (span ((class &amp;ldquo;n&amp;rdquo;)) "◊string-append") (span ((class &amp;ldquo;p&amp;rdquo;)) "{") (span ((class &amp;ldquo;n&amp;rdquo;)) "◊|name|") " " (span ((class &amp;ldquo;n&amp;rdquo;)) &amp;ldquo;OVERRIDE=◊|content|&amp;rdquo;) (span ((class &amp;ldquo;p&amp;rdquo;)) "})") "\n")) "\n")))) "\n")&lt;/p&gt;&lt;p&gt;The full configuration file can be found &lt;a href="https://github.com/kisaragi-hiu/dotfiles/blob/master/@linux/.pam_environment.pp"&gt;in my dotfiles repo&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title type="text">Working around Steins;Gate's input problem on Linux</title><id>urn:https-kisaragi-hiu-com:blog-2018-01-15-sg-input-workaround-html</id><published>2018-01-15T13:51:00+08:00</published><updated>2018-01-15T13:51:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-01-15-sg-input-workaround.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;Steins;Gate was released on Steam on September 9, 2016, for Windows only. A few months later, as far as I can remember, Wine started being able to run it.&lt;/p&gt;&lt;p&gt;However, for the entirety of 2017, I haven't been able to play it: mouse selection doesn't work at all, menu entries are selected then deselected immediately without my input, the menu is completely unusable. It's almost as if some input is being spammed…?&lt;/p&gt;&lt;video autoplay="autoplay" style="max-width:100%;" muted="muted" loop="loop" src="/static/sg-spammed-key-showcase.mp4"&gt;&lt;/video&gt;&lt;p&gt;I found the culprit just last week. There's something wrong with Wacom tablet handling in this game, and unplugging the tablet before starting it completely removed the problems. I can't believe I haven't tried this for the longest time…!&lt;/p&gt;&lt;p&gt;Now, time to actually finish reading it when I have the time…&lt;/p&gt;</content></entry><entry><title type="text">Disabling Pollen cache temporarily</title><id>urn:https-kisaragi-hiu-com:blog-2018-01-07-pollen-skip-cache-html</id><published>2018-01-07T23:20:35+08:00</published><updated>2018-01-07T23:20:35+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2018-01-07-pollen-skip-cache.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;Recently Pollen got support for caching, substantially improving build time. However, I realized it doesn't detect changes in files imported with `file-&amp;gt;string` (as to be expected), which I'm using to remove duplicated code implementing special tags in `index-template` and `post-template`. Putting how hacky that implementation is aside, I need to temporarily force pollen to not use the cache when I'm editing that template.&lt;/p&gt;&lt;p&gt;Reading through &lt;a href="http://docs.racket-lang.org/pollen/Cache.html"&gt;the documentation&lt;/a&gt;, it states that 'The compile cache tracks the modification date of the source file, the current setting of The POLLEN environment variable, and the modification dates of the template and "pollen.rkt" (if they exist).' So, to temporarily force a build without using the cache, I can just set POLLEN to something different than the last build.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;env &lt;span class="nv"&gt;POLLEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt; raco pollen build
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Voilà!&lt;/p&gt;</content></entry><entry><title type="text">My list of notable anime series in 2017</title><id>urn:https-kisaragi-hiu-com:blog-2017-12-31-notable-anime-in-2017-html</id><published>2017-12-31T23:59:57+08:00</published><updated>2017-12-31T23:59:57+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-12-31-notable-anime-in-2017.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;2017 is the second year since I started following seasonal anime. (I started with Re:0 last summer.)&lt;/p&gt;&lt;p&gt;There have been a few series that I liked this year, and this is the list.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Saga of Tanya the Evil (Youjo Senki)&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; This is actually a story about an alternative version of World War I in a world with semi-magical powers.&lt;/p&gt;&lt;p&gt;When this series aired, I thought this is just another loli series that kind of just screws around. Then a few months after the broadcast, I decided to pick up this series after watching a review of it (and being spoiled) on Youtube. It was actually quite nice.&lt;/p&gt;&lt;p&gt;I wish I could see its actual ending though. That's the problem with adaptations…&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Sakurada Reset&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; I love this series. Maybe it's because how I *somehow* relate to Haruki, maybe it's the English version that sucked… Fight me.&lt;/p&gt;&lt;p&gt;This is a story taking place in a superpower-filled town, about solving the mysteries two of the main cast face.&lt;/p&gt;&lt;p&gt;It's adapted into a movie (series) and an anime at the same time, but I've heard that the movie was heavily abridged… They really should have put the budget into the anime instead of the movie.&lt;/p&gt;&lt;p&gt;I do agree the animation leaves a lot to be desired though. There are way too many still frames, even when they could have at least added a little bit of wind or camera movements.&lt;/p&gt;&lt;p&gt;Oh, and Souma Sumire's voice is *so* great.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Sukasuka&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; Series like this are why I love fantasy stories. I just love daydreaming in those wonderfully constructed worlds. The world Sukasuka takes place in is one that's actually quite hopeless, even compared to our own. This is the *stomach aching* series of Spring 2017.&lt;/p&gt;&lt;p&gt;I really like how the animation is focused on Chtholly &lt;span style="color: #777;"&gt;(can never remember how her name's spelled…)&lt;/span&gt;, while the light novel focuses on Willem.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Made in Abyss&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; Colwelela (Hanezeve yulu-mai) kalalila!&lt;/p&gt;&lt;p&gt;&lt;span style="color: #777;"&gt;(I'm two lines away from finishing making up the language of Hanezeve Caradhina, really should finish that soon…)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;I used to dream about an abandoned house in a hazy forest, thinking about how nice it'd be to explore somewhere like that. This story gives me the same feeling.&lt;/p&gt;&lt;p&gt;With the second season announced (pretty sure it'll still be seasonal anime), I'm looking forward to following this series in 2018.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Fukumenkei Noise&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; This series aired while I was trying out practicing singing (which I currently put on hold), so it sort of grabbed my attention being a story around three people involved in music. &lt;span style="color: #777;"&gt;(I just noticed Yuzu goes by the same name as the protagonist in Citrus, how &lt;s&gt;wonderful&lt;/s&gt;…)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Being a manga adaptation (that isn't extremely successful), the manga is where all the future updates will go. I do like how this story was set up, but hope that I could see more…&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Konosuba S2&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; Being one of the more well made comedy series of recent time (?), Konosuba doesn't really *need* a second season to be an enjoyable ride, but this season lives up to its promise. It really is quite fun to watch.&lt;/p&gt;&lt;p&gt;That said, I personally still prefer deeper stories, with characters to relate to and relationships / motivations to figure out.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Kino's Journey (Kino no tabi)&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; Kino's Journey has always been its own weird beast that somehow works. The novel series has been going on for almost as long as I've lived…!&lt;/p&gt;&lt;p&gt;To be honest, the way the countries treat a traveller seems a bit unnatural to me… but that can easily be explained by how the countries are kind of just spread out everywhere. There might not be as many people travelling around like on earth.&lt;/p&gt;&lt;p&gt;I wouldn't go so far as to say I *love* this series, but it's certainly really confortable to watch (and read).&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Girl's Last Tour (Shoujo Shuumatsu Ryokou)&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; Kino's Journey, Post-apocalyptic edition (?).&lt;/p&gt;&lt;p&gt;These two stories *kind of* work the same way, although Shuumatsu is focused much more on the interactions between the two protagonists. They both just kind of wander around into adventures, and don't really have a real goal (at least initially).&lt;/p&gt;&lt;p&gt;I particularly really like how the city Chito and Yuuri travels in is portrayed. By the way, an episode of &lt;a href="https://youtube.com/channel/UCZFipeZtQM5CKUjx6grh54g" class=""&gt;“Science and Futurism with Isaac Arthur”&lt;/a&gt; actually talked about a concept *probably physically possible* similar to this story's, that involves building &lt;a href="https://youtube.com/watch?v=ioKidcpkZN0" class=""&gt;“Mega Earths”&lt;/a&gt; with layers and layers of living space.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Houseki no Kuni&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; I originally started watching this series to see how a CG anime would look like, but as I watch it, I started to simply appreciate it regardless if it's CG or not.&lt;/p&gt;&lt;p&gt;Above that, I also like the story a lot. Phos is quite a lovable character, and shipping Shinsha and Phos is quite enjoyable.&lt;/p&gt;&lt;p&gt;I haven't seen any Buddhism-influenced stories in the past, so this one is quite refreshing to me.&lt;/p&gt;&lt;div&gt;&lt;p&gt;&lt;span style="font-weight: 700;"&gt;Just Because&lt;/span&gt;&lt;/p&gt;&lt;hr style="height: 1px;width: 6rem;margin: 0.3rem auto 1.2rem;text-align: left;margin-right: 100%;background-color: #444;"/&gt;&lt;/div&gt;&lt;p&gt; This is a steady love story with not-too-bad visuals. It's a light story compared to many other series, and is quite relatable as a third grader in high school.&lt;/p&gt;&lt;p&gt;Last year I didn't have the chance to follow anime every season, so this is a new one for me. I'm (mostly) looking forward to 2018. &lt;span style="color: #777;"&gt;(Except turning 18 soon...)&lt;/span&gt;&lt;/p&gt;</content></entry><entry><title type="text">A newbie's attempt to explain lambdas</title><id>urn:https-kisaragi-hiu-com:blog-2017-12-22-attempt-to-explain-lambda-html</id><published>2017-12-22T15:44:25+08:00</published><updated>2017-12-22T15:44:25+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-12-22-attempt-to-explain-lambda.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;A lambda is a function.&lt;/p&gt;&lt;p&gt;A function is an ordinary value, just like numbers, lists, and characters.&lt;/p&gt;&lt;p&gt;Just like how a list can be created with &lt;code&gt;(list 'item 'item 'item)&lt;/code&gt;, a function can be created with &lt;code&gt;(lambda (input) body-expr)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;(lambda (x y) (+ x y))&lt;/code&gt; produces a function that takes two arguments and sends them to the + function. In a typical environment:&lt;/p&gt;&lt;pre class="brush: racket"&gt;&lt;code&gt;((lambda (x y) (+ x y)) 2 3)
 ; =&amp;gt; 5&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="arguments"&gt;Arguments&lt;/h2&gt;&lt;p&gt;The way the argument list is given depends on the language. In Scheme-based languages, the first argument to lambda is:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a list, each element in the list is bound to a local variable: &lt;code&gt;(lambda (x y) (+ x y))&lt;/code&gt;&lt;/li&gt;&lt;li&gt;an &amp;ldquo;improper list&amp;rdquo; (like &lt;code&gt;(a b . c)&lt;/code&gt;) behaves like the above, but the last element is the rest argument, bound to a list containing arguments not bound by the positional arguments:&lt;code&gt;(lambda (a b . c) (string-append a b (string-join c)))&lt;/code&gt;&lt;/li&gt;&lt;li&gt;a symbol; it becomes the rest argument: &lt;code&gt;(lambda input (string-join input))&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="binding-to-an-identifier"&gt;Binding to an identifier&lt;/h2&gt;&lt;p&gt;&lt;code&gt;define&lt;/code&gt; is used to assign an identifier to a value: &lt;code&gt;(define x 9)&lt;/code&gt; binds &lt;code&gt;x&lt;/code&gt; to 9. In the same way, &lt;code&gt;(define my-add (lambda (x y z) (+ x y z)))&lt;/code&gt; binds &lt;code&gt;my-add&lt;/code&gt; to the value &lt;code&gt;(lambda (x y z) (+ x y z))&lt;/code&gt;. Now &lt;code&gt;my-add&lt;/code&gt; can be used like the lambda itself.&lt;/p&gt;&lt;pre class="brush: racket"&gt;&lt;code&gt;((lambda (x y z) (+ x y z)) 1 2 3)
 ; =&amp;gt; 6

 (define my-add
   (lambda (x y z) (+ x y z)))
 (my-add 1 2 3)
 ; =&amp;gt; 6&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="shorthand-for-defining-functions"&gt;Shorthand for defining functions&lt;/h2&gt;&lt;p&gt;&lt;code&gt;define&lt;/code&gt; has a shorthand for creating functions: &lt;code&gt;racket
 (define my-add (lambda (x y) (+ x y)))&lt;/code&gt; can be written as: &lt;code&gt;racket
 (define (my-add x y) (+ x y))&lt;/code&gt;&lt;/p&gt;</content></entry><entry><title type="text">Colwelelo Kalalila (Day 3, 4)</title><id>urn:https-kisaragi-hiu-com:blog-2017-12-08-hanezeve-day-3-4-html</id><published>2017-12-08T19:03:56+08:00</published><updated>2017-12-08T19:03:56+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-12-08-hanezeve-day-3-4.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;The last two days I listened to the song a few more times to check the lyrics, and then made up another line in section B.&lt;/p&gt;&lt;p&gt;Listen to Hanezeve Caradhina &lt;a href="https://open.spotify.com/track/0KzOeB44GAj2rHmoXML0eb"&gt;on Spotify&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="lyrics-changes"&gt;Lyrics changes&lt;/h2&gt;&lt;p&gt;I found two parts that should be changed:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The word for &amp;ldquo;journey&amp;rdquo;, &amp;ldquo;lalelila&amp;rdquo;, sounds more like &amp;ldquo;walelila&amp;rdquo;.&lt;/li&gt;&lt;li&gt;The first sentence of B and &amp;rsquo;B should be the same.&lt;/li&gt;&lt;/ol&gt;&lt;hr/&gt;&lt;pre&gt;
 A.
 Halalaha zela halalelu
 Sivivile shi-dhina
 '(span ((style "color:red;")) "houwelela, lalelila")
 '(span ((style "color:green;")) "houwelela, walelila")
 Hanezeve cara-dhina

 B.
 '(span ((style "color:red;")) "Halalaha la forðe hala")
 '(span ((style "color:green;")) "Holo loholo forðe holo")
 helelele lelele
 ...

 'B.
 '(span ((style "color:red;")) "Kodo wodo hondo hondo-oh")
 '(span ((style "color:green;")) "Holo loholo forðe holo")
 ...&lt;/pre&gt;&lt;hr/&gt;&lt;h2 id="the-lyrics-again"&gt;The lyrics, again&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;A. Halalaha zela halalelu Sivivile shi-dhina houwelela, walelila Hanezeve cara-dhina&lt;/p&gt;&lt;p&gt;B. holo loholo forðe holo helelele lelele colwelela kalalila Hanezeve yulumai ni&lt;/p&gt;&lt;p&gt;A. Halalaha zela halalelu Sivivile shi-dhina houwelela, walelila Hanezeve cara-dhina&lt;/p&gt;&lt;p&gt;&amp;rsquo;B. holo loholo forðe holo helelele lelele colwelelo kalalila Hanezeve yulumai ni&lt;/p&gt;&lt;p&gt;A. Halalaha zela halalelu Sivivile shi-dhina houwelela, walelila Hanezeve cara-dhina&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="lets-continue-our-journey"&gt;Let&amp;rsquo;s continue our journey&lt;/h2&gt;&lt;p&gt;The A section is already done, now there&amp;rsquo;s the rest of B.&lt;/p&gt;&lt;p&gt;Let me start with the line &lt;code&gt;colwelelo kalalila&lt;/code&gt;. The word &amp;ldquo;kalalila&amp;rdquo; shares the "-lila" suffix with &amp;ldquo;walelila&amp;rdquo; (wonder), and it would make sense if it meant something like &amp;ldquo;journey&amp;rdquo;, so I&amp;rsquo;ll make it so. Now I can make up the meaning of "-lila" to be &amp;ldquo;unknown&amp;rdquo;; piecing these words together, I&amp;rsquo;ll get:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;"-lila": &amp;ldquo;unknown&amp;rdquo;&lt;/li&gt;&lt;li&gt;&amp;ldquo;wale-&amp;rdquo;: &amp;ldquo;idea&amp;rdquo;&lt;/li&gt;&lt;li&gt;&amp;ldquo;kala&amp;rdquo;: something like &amp;ldquo;seeking&amp;rdquo;&lt;/li&gt;&lt;li&gt;&amp;ldquo;walelila&amp;rdquo;: &amp;ldquo;idea-unknown&amp;rdquo; = &amp;ldquo;wonder&amp;rdquo;&lt;/li&gt;&lt;li&gt;&amp;ldquo;kalalila&amp;rdquo;: &amp;ldquo;seeking-unknown&amp;rdquo; = &amp;ldquo;journey&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now I&amp;rsquo;m not quite sure what I want the word &amp;ldquo;colwelela&amp;rdquo; to mean. Currently I&amp;rsquo;m thinking that it means &amp;ldquo;to start&amp;rdquo;, but it&amp;rsquo;s only one syllable away from &amp;ldquo;houwelela&amp;rdquo;&amp;hellip; I&amp;rsquo;ll ignore that similarity for now.&lt;/p&gt;&lt;p&gt;So &amp;ldquo;colwelela&amp;rdquo; can mean &amp;ldquo;start&amp;rdquo;, and let&amp;rsquo;s say &amp;ldquo;colwelelo&amp;rdquo; means &amp;ldquo;continue&amp;rdquo;. This way, the lyrics can progress from &amp;ldquo;let the journey begin&amp;rdquo; to &amp;ldquo;let the journey continue&amp;rdquo;, which somewhat fits the image of the song itself. I think that transition in the middle of the song really sounds like Riko&amp;rsquo;s journey down to layer 2; considering it&amp;rsquo;s also played when they leave layer 2, these points just kind of line up.&lt;/p&gt;&lt;p&gt;The word order here with &amp;ldquo;start journey&amp;rdquo; / &amp;ldquo;continue journey&amp;rdquo; is different than the first line, &amp;ldquo;dream I imagine&amp;rdquo;. I&amp;rsquo;m putting this off as well, but maybe this can be how &amp;ldquo;let object action&amp;rdquo; is written&amp;hellip;?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&amp;ldquo;colwelela&amp;rdquo;: &amp;ldquo;start&amp;rdquo;&lt;/li&gt;&lt;li&gt;&amp;ldquo;colwelelo&amp;rdquo;: &amp;ldquo;continue&amp;rdquo;&lt;/li&gt;&lt;li&gt;&amp;ldquo;colwelela kalalila&amp;rdquo;: &amp;ldquo;start (seeking-unknown = journey)&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="walelila-halalelu"&gt;Walelila Halalelu&lt;/h2&gt;&lt;p&gt;With this, we can transliterate most of the lyrics already:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A. (thought-fiction = dream) I (thought-make = imagine) explore even-deep treasures, (idea-unknown = wonder) Abyss in-deep&lt;/p&gt;&lt;p&gt;B. ???? ???? ???? ???? start (seeking-unknown = journey) Abyss at-bottom to&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And the translated lyrics is now:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A. I am dreaming a dream to explore even deeper the treasures, the wonder Deep in the Abyss&lt;/p&gt;&lt;p&gt;B. Holo loholo forðe holo Helelele lelele Let the journey begin to the bottom of the Abyss&lt;/p&gt;&lt;p&gt;A. I am dreaming a dream to explore even deeper the treasures, the wonder Deep in the Abyss&lt;/p&gt;&lt;p&gt;&amp;rsquo;B. Holo loholo forðe holo Helelele lelele Let the journey continue to the bottom of the Abyss&lt;/p&gt;&lt;p&gt;A. I am dreaming a dream to explore even deeper the treasures, the wonder Deep in the Abyss&lt;/p&gt;&lt;/blockquote&gt;</content></entry><entry><title type="text">Grammar Zela Halalelu (Day 2)</title><id>urn:https-kisaragi-hiu-com:blog-2017-12-06-grammar-zela-halalelu-day2-html</id><published>2017-12-06T23:23:00+08:00</published><updated>2017-12-06T23:23:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-12-06-grammar-zela-halalelu-day2.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;Today I watched the episodes where Hanezeve Caradhina was played (1, 8, 9), and further confirmed myself that it indeed feels like describing Riko&amp;rsquo;s journey.&lt;/p&gt;&lt;p&gt;With that, I got a rough idea for the first line that&amp;rsquo;s along the lines with &lt;code&gt;I'm dreaming a dream&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="dreaming-the-grammar"&gt;Dreaming the grammar&lt;/h2&gt;&lt;p&gt;I started with how &amp;ldquo;halalaha&amp;rdquo; and &amp;ldquo;halalelu&amp;rdquo; both have the common prefix &amp;ldquo;hala-&amp;rdquo;. Since I was already thinking about using &amp;ldquo;dream&amp;rdquo; as the idea of the line, I defined &amp;ldquo;hala-&amp;rdquo; to be a prefix related to thoughts, and "-laha" to be &amp;ldquo;fiction&amp;rdquo;, &amp;ldquo;illusion&amp;rdquo;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&amp;ldquo;hala-&amp;rdquo;: word decorator (sort of an adjective), says that the word is thoughts-related&lt;/li&gt;&lt;li&gt;"-laha": noun, &amp;ldquo;fiction&amp;rdquo;, &amp;ldquo;illusion&amp;rdquo;&lt;/li&gt;&lt;li&gt;"-lelu": &amp;ldquo;make&amp;rdquo;, as in &amp;ldquo;make a dream&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Matching up with my rough idea for the first line, I defined &amp;ldquo;halalelu&amp;rdquo; to be the verb &amp;ldquo;dream&amp;rdquo;, and zela to be &amp;ldquo;I&amp;rdquo;. This creates a syntax for a sentence: &amp;ldquo;Hala-laha zela hala-lelu&amp;rdquo; ⇒ &amp;ldquo;Imagination I Dream&amp;rdquo;, making it a &amp;ldquo;Object Subject Verb&amp;rdquo; sentence structure.&lt;/p&gt;&lt;h2 id="todays-progress"&gt;Today&amp;rsquo;s progress&lt;/h2&gt;&lt;p&gt;The first paragraph is now:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I am dreaming a dream&lt;br/&gt; to explore even deeper&lt;br/&gt; the treasure, the wonder&lt;br/&gt; deep in the Abyss&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;And I now have a rough grammar:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Sentence := Object Subject Action
 Object := noun-phrase
 Subject := noun-phrase
 Action := verb-phrase
 "Halalaha zela halalelu"

 noun-phrase := (noun [preposition-phrase])
 "Hanezeve cara-dhina" "Hanezeve" "houwelela" "lalelila"

 verb-phrase := (verb [decorator-phrase])
 "Sivivile shi-dhina"

 preposition-phrase := (preposition [decorator-phrase])
 "cara-dhina"

 decorator-phrase := ([decorator] decorator)
 "shi-dhina"&lt;/code&gt;&lt;/pre&gt;</content></entry><entry><title type="text">Making up a language from Hanezeve Caradhina, Day 1</title><id>urn:https-kisaragi-hiu-com:blog-2017-12-05-hanezeve-caradhina-day1-html</id><published>2017-12-05T23:32:00+08:00</published><updated>2017-12-05T23:32:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-12-05-hanezeve-caradhina-day1.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;After listening to Hanezeve Caradhina for a few days, I decided it would be interesting to try to create a language based on the lyrics.&lt;/p&gt;&lt;p&gt;Listen to Hanezeve Caradhina (and the rest of the Made in Abyss OST) &lt;a href="https://open.spotify.com/album/5oEzjkSYSfC0ITRiqK6m8l"&gt;on Spotify.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The song doesn&amp;rsquo;t actually have too much lyrics, as I will show in the next few paragraphs, which means this language isn&amp;rsquo;t really going to be &amp;ldquo;deciphered&amp;rdquo;; I&amp;rsquo;m simply going to create a new (very incomplete) language that might slightly makes sense. This is my progress in the first day.&lt;/p&gt;&lt;p&gt;First, the lyrics.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A. Halalaha zela halalelu Sivivile shi-dhina houwelela, lalelila Hanezeve cara-dhina&lt;/p&gt;&lt;p&gt;B. Halalaha la forðe hala helelele lelele colwelela kalalila Hanezeve yulumai ni&lt;/p&gt;&lt;p&gt;A. Halalaha zela halalelu Sivivile shi-dhina houwelela, lalelila Hanezeve cara-dhina&lt;/p&gt;&lt;p&gt;&amp;rsquo;B. Kodo wodo hondo hondo-oh helelele lelele colwelelo kalalila Hanezeve yulumai ni&lt;/p&gt;&lt;p&gt;A. Halalaha zela halalelu Sivivile shi-dhina houwelela, lalelila Hanezeve cara-dhina&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;As you can see, it&amp;rsquo;s all just two paragraphs with some slight variations in B. I&amp;rsquo;ll explain why I grouped syllables like this in a little bit.&lt;/p&gt;&lt;p&gt;There are a few patterns in the lyrics:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&amp;ldquo;Hanezeve&amp;rdquo; seems to be the focus.&lt;/li&gt;&lt;li&gt;"-dhina" appears quite a lot.&lt;/li&gt;&lt;li&gt;&amp;ldquo;colwele-la&amp;rdquo; progresses into &amp;ldquo;colwele-lo&amp;rdquo;.&lt;/li&gt;&lt;li&gt;the syllables tend to be sung in groups of four.&lt;/li&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;But I still have to make up much of the grammar.&lt;/p&gt;&lt;h2 id="deep-in-the-abyss"&gt;Deep in the Abyss&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s imagine that &amp;ldquo;Hanezeve cara-dhina&amp;rdquo; means &amp;ldquo;Deep in the Abyss&amp;rdquo;. Then I can make up a grammar:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Hanezeve: the Abyss&lt;/li&gt;&lt;li&gt;-dhina: post-fix adjective for &amp;ldquo;deep&amp;rdquo;&lt;/li&gt;&lt;li&gt;cara-: particle meaning &amp;ldquo;in&amp;rdquo; or &amp;ldquo;down&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That&amp;rsquo;s a small part of the language thought up.&lt;/p&gt;&lt;p&gt;Next, using the same sort of grammar, &amp;ldquo;yulu-maini&amp;rdquo; can be a preposition-adjective/adverb pair as well. Then imagine &amp;ldquo;Hanezeve yulumaini&amp;rdquo; means something about the bottom of the Abyss&amp;hellip; seems like I can say that &amp;ldquo;yulu-&amp;rdquo; means &amp;ldquo;at&amp;rdquo; and "-maini" means &amp;ldquo;bottom&amp;rdquo;.&lt;/p&gt;&lt;p&gt;However, I&amp;rsquo;m a little stuck here. What next? What should this song be about? Until this point, I was thinking that this is a hymn dedicated to the Abyss, but maybe it&amp;rsquo;s about Riko&amp;rsquo;s journey?&lt;/p&gt;&lt;p&gt;I now have to decide between &amp;ldquo;Riko&amp;rsquo;s Journey&amp;rdquo; and &amp;ldquo;Hymn of the Abyss&amp;rdquo;. Initially I was still thinking that Riko&amp;rsquo;s Journey wouldn&amp;rsquo;t suit the epic style this song has, but after listening to it a few more times and imagining the progression, it started to feel like a journey more and more. I eventually decided the vocal and the instruments combined suits &amp;ldquo;Riko&amp;rsquo;s Journey&amp;rdquo; better.&lt;/p&gt;&lt;p&gt;With that, &amp;ldquo;Hanezeve yulumaini&amp;rdquo; probably shouldn&amp;rsquo;t just be a noun phrase. Plus, that &amp;ldquo;ni&amp;rdquo; really gives me the urge to connect it with the Japanese particle &amp;ldquo;に&amp;rdquo;, ie. &amp;ldquo;to&amp;rdquo;. So let&amp;rsquo;s imagine it means &amp;ldquo;To the bottom of the Abyss&amp;rdquo;. Now:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Hanezeve: the Abyss&lt;/li&gt;&lt;li&gt;yulu-: particle meaning &amp;ldquo;at&amp;rdquo; or &amp;ldquo;of&amp;rdquo;, sort of&lt;/li&gt;&lt;li&gt;-mai: post-fix adjective for &amp;ldquo;bottom&amp;rdquo;&lt;/li&gt;&lt;li&gt;-ni: analogous to Japanese &amp;ldquo;に&amp;rdquo;, meaning &amp;ldquo;to&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using this grammar, I can read &lt;code&gt;Hanezeve cara-dhina&lt;/code&gt; as &lt;code&gt;Abyss in-deep&lt;/code&gt;, and &lt;code&gt;Hanezeve yulu-mai ni&lt;/code&gt; as &lt;code&gt;Abyss at-bottom to&lt;/code&gt;. Progress!&lt;/p&gt;&lt;h2 id="the-wonder"&gt;The wonder&lt;/h2&gt;&lt;p&gt;Another sentence I&amp;rsquo;ve managed to make up a structure, then somewhat make sense of, is:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Sivivile shi-dhina houwelela, lalelila&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I started by just listening to the vocal, thinking about the main idea of the song (&amp;ldquo;Riko&amp;rsquo;s Journey&amp;rdquo;), and imagining what English lyrics would be fitting. After a bit, I came up with:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Explore even deeper &amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;which fits both Riko&amp;rsquo;s desire to go deeper, and the grammar structure I established with -dhina in the previous section. So:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Sivivile: verb, &amp;ldquo;explore&amp;rdquo;&lt;/li&gt;&lt;li&gt;shi-: adverb/adjective modifier, &amp;ldquo;even&amp;rdquo; as in &amp;ldquo;even more&amp;rdquo;&lt;/li&gt;&lt;li&gt;-dhina: post-fix adverb/adjective, &amp;ldquo;deep&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As of the other two words, I just thought up &amp;ldquo;treasure&amp;rdquo; and &amp;ldquo;wonder&amp;rdquo; as two nouns suitable for &amp;ldquo;explore the Abyss even deeper&amp;rdquo;. Lalelila sounds more like wonder in my mind for how it repeats &lt;code&gt;l-vowel&lt;/code&gt; four times with the vowel going around (a-e-i-a), so I made it &amp;ldquo;wonder&amp;rdquo;, and houwelela &amp;ldquo;treasure&amp;rdquo;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;houwelela: noun, treasure&lt;/li&gt;&lt;li&gt;lalelila: noun, wonder&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="what-i-have-now"&gt;What I have now&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;A. Halalaha zela halalelu Explore even deeper the treasure, the wonder Deep in the Abyss&lt;/p&gt;&lt;p&gt;B. Halalaha la forðe hala helelele lelele colwelela kalalila To the bottom of the Abyss&lt;/p&gt;&lt;p&gt;A. Halalaha zela halalelu Explore even deeper the treasure, the wonder Deep in the Abyss&lt;/p&gt;&lt;p&gt;&amp;rsquo;B. Kodo wodo hondo hondo-oh helelele lelele colwelelo kalalila To the bottom of the Abyss&lt;/p&gt;&lt;p&gt;A. Halalaha zela halalelu Explore even deeper the treasure, the wonder Deep in the Abyss&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="more-to-come-hopefully"&gt;More to come (hopefully)&lt;/h2&gt;&lt;p&gt;There are still many regularities with the rest of the lyrics.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Halalaha zela halalelu?&lt;/li&gt;&lt;li&gt;&amp;rsquo;B changed the first line quite a bit, what should that mean?&lt;/li&gt;&lt;li&gt;colwelela → colwelelo?&lt;/li&gt;&lt;li&gt;kalalila?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And I&amp;rsquo;m sure trying to make up something would be a nice pass-time for me for the next few weeks or something. So hopefully I can keep this up and eventually finish this small language.&lt;/p&gt;</content></entry><entry><title type="text">East Asian names, to reorder or not to reorder?</title><id>urn:https-kisaragi-hiu-com:blog-2017-11-26-east-asian-names-reverse-or-not-html</id><published>2017-11-26T17:55:59+08:00</published><updated>2017-11-26T17:55:59+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-11-26-east-asian-names-reverse-or-not.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;In English, some people write East Asian names (Chinese, Japanese etc.) with given name first, surname last (like "Kei Asai"). I personally dislike doing this, because names are whole word objects that shouldn't be reordered. To stay accurate and somewhat respectful, I prefer to simply transliterate, ie. romanize when translating.&lt;/p&gt;&lt;p&gt;Me being born in Taiwan using Mandarin as my primary language probably contributes to this preference. Knowing the original name, then seeing it reversed in an English document throws me off quite a bit. Not to mention the fact that there are infinitely more different name formats out there, not just the English "First Middle Last" or the East Asian "Surname-Given_name".&lt;/p&gt;&lt;p&gt;There's an exception to this: when the person already has an English name, I will use that instead.&lt;/p&gt;&lt;p&gt;So, in conclusion, I think a name should always be translated by sound unless otherwise specified.&lt;/p&gt;&lt;p&gt;Here is a table of some Japanese and Chinese names, how they would be translated with surname kept last, and how I would translate them.&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;East Asian name&lt;/td&gt;&lt;br/&gt;&lt;td&gt;"Reordered"&lt;/td&gt;&lt;br/&gt;&lt;td&gt;My Preference&lt;/td&gt;&lt;/tr&gt;&lt;br/&gt;&lt;tr&gt;&lt;td&gt;王小明&lt;/td&gt;&lt;br/&gt;&lt;td&gt;Xiaoming Wang&lt;/td&gt;&lt;br/&gt;&lt;td&gt;Wang Xiaoming&lt;/td&gt;&lt;/tr&gt;&lt;br/&gt;&lt;tr&gt;&lt;td&gt;一宮エルナ&lt;/td&gt;&lt;br/&gt;&lt;td&gt;Eruna Ichimiya&lt;/td&gt;&lt;br/&gt;&lt;td&gt;Ichimiya Eruna&lt;/td&gt;&lt;/tr&gt;&lt;br/&gt;&lt;tr&gt;&lt;td&gt;郭台銘&lt;/td&gt;&lt;br/&gt;&lt;td&gt;Terry Guo&lt;/td&gt;&lt;br/&gt;&lt;td&gt;Terry Guo&lt;/td&gt;&lt;/tr&gt;&lt;br/&gt;&lt;tr&gt;&lt;td&gt;春埼美空&lt;/td&gt;&lt;br/&gt;&lt;td&gt;Misora Haruki&lt;/td&gt;&lt;br/&gt;&lt;td&gt;Haruki Misora&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content></entry><entry><title type="text">Setting up this site with Pollen and Frog</title><id>urn:https-kisaragi-hiu-com:blog-2017-11-14-this-blog-with-pollen-and-frog-html</id><published>2017-11-14T10:56:43+08:00</published><updated>2017-11-14T10:56:43+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-11-14-this-blog-with-pollen-and-frog.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;I have wanted to keep a personal site since 2015. I started on Jimdo, then moved to WordPress.com, then Blogger, then just let the site rot. I wasn't writing much, and the only posts I had were copies of my UTAU cover announcements.&lt;/p&gt;&lt;h1 id="g5626"&gt;Github Pages&lt;/h1&gt;&lt;p&gt;In March this year, I discovered Github Pages, and wanted to revive my personal site. I started with the official tutorial, not understanding static site generators or Jekyll, even. I only wrote one post during this time, basically &lt;a href="https://kisaragi-hiu.com/blog/2017-03-19-new-website" class=""&gt;the hello world post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I then moved to Hugo in June, with the next two posts being yet again, cover announcements. I didn't (and still don't) understand Hugo, and so I was in the dark when trying to get the site to look the way I want it to. After July, the site was left to rot again.&lt;/p&gt;&lt;h1 id="g5627"&gt;First encounter with Frog, and my Pollen site based on mstill.io&lt;/h1&gt;&lt;p&gt;In September, after trying out Pollen for my self introduction in August (when my teacher told us to do one), and looking at Frog for a bit, I tried to move the site onto Frog. Knowing next to nothing of Bootstrap and the Racket html templating system (which Frog utilizes), I was again in the dark in stylizing and designing the site. As I had just played with Pollen, I decided to see if anyone has built a blog using Pollen. I found &lt;a href="https://mstill.io"&gt;Malcolm Still's website&lt;/a&gt; on Github, and forked it to use as a template, as it is released under the BSD 3-clause license.&lt;/p&gt;&lt;h1 id="g5628"&gt;Back to Frog, preprocessed with Pollen&lt;/h1&gt;&lt;p&gt;When trying to customize and extend mstill.io's system, I had no option but to learn how Malcolm Still has implemented it. This actually taught me a lot about how static site generators (generally) work: they take in source files, turn them into HTML, then combine them into templates. Previously I thought of templates as a black box, but now I see they're just combined together like a tree.&lt;/p&gt;&lt;p&gt;Eventually, after a few attempts at adding features to posts, I started facing an increasing maintenance overhead. There were four distinct templates, the site index, the tag index, the tags index (a list of all tags), and the general page template, which had to serve for posts and non-posts. Then there are also some features I have no idea how to do with just Pollen, like pagination. I decided, after two weeks, to move to a proper static site generator.&lt;/p&gt;&lt;h2 id="g5629"&gt;Choosing the static site generator&lt;/h2&gt;&lt;p&gt;I thought about a few different static site generators. Hugo and Hexo both seemed pretty good, but after seeing Hugo shortcodes and realizing how easy is it to do with Pollen, I decided to stay in the Racket ecosystem and use Frog mainly, maybe with Pollen as the preprocessor. To move back to Frog, I had to rewrite the posts in Markdown, figure out how to deal with Markdown newlines, and figure out a design.&lt;/p&gt;&lt;h2 id="g5630"&gt;Port over the posts, preprocess them with Pollen&lt;/h2&gt;&lt;p&gt;As it turned out, preprocessing the posts with Pollen actually means I can keep the tag functions I was using, and simply tell them to return an HTML or Markdown string. This way I basically have an extensible equivalent to Hugo's shortcodes: for instance, `◊github["kisaragi-hiu"]{this link}` gets turned into &lt;a href="https://github.com/kisaragi-hiu" class=""&gt;this link&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="g5631"&gt;Dealing with Markdown newlines&lt;/h2&gt;&lt;p&gt;In Markdown, a single newline doesn't get turned into an actual newline in the output. This generally works fine, except when I want paragraphs with fixed length lines. Splitting each line into its own paragraph is no good, as I still want paragraphs to be clear. I solved this by having a newline-decode function, which turns two or more newlines into one, and adds \&amp;lt;br\&amp;gt; to each line.&lt;/p&gt;&lt;h2 id="g5632"&gt;Figuring out the design&lt;/h2&gt;&lt;p&gt;This is the trickest part for me. My web development experience only consisted of going through freeCodeCamp's first few turorials and modifying an already styled tenplate from mstill.io.&lt;/p&gt;&lt;p&gt;I started with trying to make a decent looking top bar in Bootstrap, then gave up because I'm overwhelmed by Bootstrap's complexity. I then looked around and tried to base my style on Skeleton CSS, this time succeeding.&lt;/p&gt;&lt;p&gt;In the end I spent two weeks from putting up an issue on the Github page to move away from Pollen, to having an overall better site (compared to the mess I added onto mstill.io's basis) built on Frog, in two weeks time.&lt;/p&gt;&lt;h1 id="g5633"&gt;Extra: setting up Travis CI&lt;/h1&gt;&lt;p&gt;I followed Alexis King's &lt;a href="https://lexi-lambda.github.io/blog/2015/07/18/automatically-deploying-a-frog-powered-blog-to-github-pages/"&gt;blog post&lt;/a&gt; when setting up Travis when I still hadn't moved onto Frog. Instead of using just one deploy.sh though, I have a build.sh with a build and a publish function, and a deploy.sh which does the deployment.&lt;/p&gt;&lt;p&gt;I develop this site on &lt;a href="https://github.com/kisaragi-hiu/kisaragi-hiu.github.io" class=""&gt;Github&lt;/a&gt;, with posts released under CC-BY-SA and code under BSD 3-clause.&lt;/p&gt;</content></entry><entry><title type="text">Iterations of Learning</title><id>urn:https-kisaragi-hiu-com:blog-2017-10-10-iterations-html</id><published>2017-10-10T00:00:00+08:00</published><updated>2017-10-10T00:00:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-10-10-iterations.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;Learning is based on iterations. Do something, then repeat, then repeat until you're familiar with it, is essentially the process; people call this "practice".&lt;/p&gt;&lt;p&gt;Different subjects have different sorts of steps to repeat, for instance:&lt;/p&gt;&lt;h3 id="g5841"&gt;Language learning&lt;/h3&gt;&lt;p&gt;1. Find a unit of text (eg. a sentence).&lt;/p&gt;&lt;p&gt;2. Figure out what it means.&lt;/p&gt;&lt;p&gt;3. Repeat.&lt;/p&gt;&lt;h3 id="g5842"&gt;Piano&lt;/h3&gt;&lt;p&gt;1. Find an unfamiliar sheet.&lt;/p&gt;&lt;p&gt;2. Divide it into smaller chunks.&lt;/p&gt;&lt;p&gt;3. Play each chunk until some level of familiarity.&lt;/p&gt;&lt;p&gt;4. Combine them together.&lt;/p&gt;&lt;p&gt;5. Repeat.&lt;/p&gt;&lt;p&gt;Learning is essentially finding the steps of an iteration, and then doing it again and again.&lt;/p&gt;</content></entry><entry><title type="text">Moving the blog, again</title><id>urn:https-kisaragi-hiu-com:blog-2017-09-24-pollen-html</id><published>2017-09-24T18:20:00+08:00</published><updated>2017-09-24T18:20:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-09-24-pollen.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;So, I restructured this blog again, this time using &lt;a href="https://mstill.io"&gt;mstill.io&lt;/a&gt; as a template, because I don't know how to use bootstrap. And I want to use Pollen markup.&lt;/p&gt;&lt;p&gt;The process is actually suprisingly smooth, except:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Post date isn't updating. I have to fix it.&lt;/li&gt;&lt;li&gt;There's no Atom / RSS feed ready to use, I'll have to maybe do it myself.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Overall I like this setup a bit more.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Update: The not updating date was just me hard-coding the date during testing, then forgetting it there.&lt;/em&gt;&lt;/p&gt;&lt;div class="image"&gt;&lt;p&gt;&lt;img src="/static/newsite-directory.jpg" style="max-width:100%;" class=""/&gt;&lt;/p&gt;&lt;p class="image-caption"&gt;New site directory structure&lt;/p&gt;&lt;/div&gt;</content></entry><entry><title type="text">Discovering Racket through making a osu! skin</title><id>urn:https-kisaragi-hiu-com:blog-2017-09-13-discovering-racket-html</id><published>2017-09-13T17:58:00+08:00</published><updated>2017-09-13T17:58:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-09-13-discovering-racket.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;In around March this year, I started trying to make my own osu! skin, or at least mix a skin for my own use.&lt;br/&gt;I started with the &lt;a href="https://osu.ppy.sh/forum/t/454986"&gt;Emilia (Re:0) skin by Beatstatic&lt;/a&gt;, with a git repo to track my changes, and copied the hitcircles from &lt;a href="https://osu.ppy.sh/forum/t/300001"&gt;Clear Skin Ultra 2.4&lt;/a&gt; (I like its hitcircle design a lot).&lt;/p&gt;&lt;p&gt;Then I stumbled across &lt;a href="https://www.youtube.com/watch?v=Yih6pz09Z1A"&gt;a font made for the I script in Re:0&lt;/a&gt; in April, and started wanting to learn the script for the sake of it. As part of the practice, I decided why not make osu!'s elements in the Re:0 writing system? So I made a new folder in my mix skin, then opened Blender to make the elements, because that's the only tool I was comfortable with using. (I've since learned to use Inkscape more.)&lt;/p&gt;&lt;p&gt;Making osu! skin elements with Blender is weird. I am putting multiple elements in the same file and adding a different camera for each of them, binding the cameras onto markers, and so I wondered if there's some way to render every marker and maybe name the output with the marker.&lt;br/&gt;After a bit of Googling, I saw an answer by &lt;code&gt;p2or&lt;/code&gt; on StackExchange that fits my needs perfectly. (I added the first two comments.)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;table class="sourcetable"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# by p2or on Blender StackExchange&lt;/span&gt;
 &lt;span class="c1"&gt;# https://blender.stackexchange.com/questions/23121&lt;/span&gt;
 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bpy&lt;/span&gt;
 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

 &lt;span class="c1"&gt;# get the scene&lt;/span&gt;
 &lt;span class="n"&gt;scn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;

 &lt;span class="c1"&gt;# get the output path&lt;/span&gt;
 &lt;span class="n"&gt;output_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;

 &lt;span class="c1"&gt;# iterate through markers and render&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;scn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeline_markers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
     &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;
     &lt;span class="n"&gt;marker_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
     &lt;span class="n"&gt;scn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;scn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;".jpg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;write_still&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scene&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output_path&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;With that, I was able to hack together a shell script to render all blend files. Blender also only allows one resolution per scene, so I had to write some post processing functions that resize some images for me, as well as a sort of interface to them through the file names.&lt;/p&gt;&lt;p&gt;Later in June, I decided to also cover the hitcircles and other elements, and eventually removed all assets not made by me. I also purged all of those out of the git repository; in hindsight, I actually regret that a bit. While refactoring that, I also wanted to do something about the ugly shell script, and I started looking around for different languages.&lt;/p&gt;&lt;p&gt;I thought about &lt;a href="http://xon.sh/"&gt;Xonsh&lt;/a&gt;, Python, &lt;a href="https://scsh.net/"&gt;&lt;code&gt;scsh&lt;/code&gt;&lt;/a&gt;, the &lt;a href="https://github.com/michaelmacinnis/oh"&gt;&lt;code&gt;oh&lt;/code&gt;&lt;/a&gt; shell, and some others, but:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;oh&lt;/code&gt;: I don't really understand. At least not yet.&lt;/li&gt;&lt;li&gt;Python: I don't like doing shell script-y stuff in Python currently. Previously I had ported my &lt;code&gt;randomwallpaper&lt;/code&gt; script to Python, and it didn't feel better than Bash. This is purely my issue.&lt;/li&gt;&lt;li&gt;Xonsh: Looks very interesting, but I got stuck trying to figure out how I should parse command line arguments.&lt;/li&gt;&lt;li&gt;&lt;code&gt;scsh&lt;/code&gt;: A full language + some shell-isms, sort of like Xonsh. Project feels kind of inactive though.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So I just gave up and stayed with Bash, and tried to improve the script further; but the "Scheme shell" idea seemed really interesting to me, so I decided to Google for "Scheme shell" and see what I'd get. Racket showed up in the results, and I met Racket for the first time. It actually looks great!&lt;/p&gt;&lt;p&gt;From there I started with the &lt;a href="http://docs.racket-lang.org/quick/index.html"&gt;Quick Intro&lt;/a&gt; by Matthew Flatt, and am now trying to learn Racket. Along the way I have seen Pollen, and wrote a self introduction for school in it; and Frog, which I now build this blog with. I'm still very new — I'm not exactly trying hard on anything — but I have definitely stumbled across a very powerful tool.&lt;/p&gt;&lt;p&gt;About the osu! skin, it's now released as &lt;a href="https://osu.ppy.sh/forum/t/630525/start=0"&gt;Retome (currently 0.4)&lt;/a&gt; on the osu! forum.&lt;/p&gt;</content></entry><entry><title type="text">在Android上用Frog</title><id>urn:https-kisaragi-hiu-com:blog-2017-09-12-termux-and-linux-deploy-html</id><published>2017-09-12T16:46:00+08:00</published><updated>2017-09-12T16:46:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-09-12-termux-and-linux-deploy.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;Linux Deploy是個很不錯的Android app。這個網站前幾天改成了用Frog建置，但是Termux裡沒有racket的套件(如果我是用Jekyll還是Hugo之類的Termux裡面有需要的套件，但那些我還弄不懂)。用Linux Deploy我可以建構一個Debian Sid的(類似Container)的環境出來，啟用ssh，然後把/sdcard bind到那裡面，再裝好Racket和Frog，就可以在手機上建構這個網站了。&lt;/p&gt;&lt;p&gt;能在Termux直接有Racket的話會更好就是。現在啟動這個Container(?)的時候電池總是燒很快。&lt;/p&gt;</content></entry><entry><title type="text">いつか海の見える街で Cover + PV</title><id>urn:https-kisaragi-hiu-com:blog-2017-07-10-itsukauminomierubashode-html</id><published>2017-07-10T15:01:00+08:00</published><updated>2017-07-10T15:01:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-07-10-itsukauminomierubashode.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;試著唱了いつか海の見える街で，然後弄了個簡單的歌詞PV。背景是畢旅時坐電車在車廂尾端錄的，剛好我們班在最後一車。&lt;/p&gt;&lt;p&gt;歌詞是ほのか明朝，在 blender compositor Alpha Over 在 Glow 然後用 ColorRamp 染色之後的背景的上面。Kdenlive 做打包專案時沒注意到.blend不會打包，結果歌詞圖片的.blend就被我刪掉了。&lt;/p&gt;&lt;p&gt;歌聲嘛... 還是蠻糟的。多練習之類的吧。&lt;/p&gt;&lt;p class="ytembed-default" style=""&gt;&lt;iframe id="ytplayer" type="text/html" width="640" height="360" style="position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;" src="https://www.youtube.com/embed/ZVCGLr8YQg0?autoplay=0&amp;amp;origin=https://kisaragi-hiu.com" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;p&gt;開頭的淡入應該等聲音出現再開始的...&lt;/p&gt;</content></entry><entry><title type="text">レディーレ Cover</title><id>urn:https-kisaragi-hiu-com:blog-2017-06-28-redire-html</id><published>2017-06-28T22:50:00+08:00</published><updated>2017-06-28T22:50:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-06-28-redire.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;試唱了バルーン的レディーレ。&lt;br/&gt;&lt;br/&gt;看到本家就想要唱唱看了，但拖了兩個禮拜才全部弄好就是ww&lt;/p&gt;&lt;p&gt;這次回到用 Ardour 來混音了。&lt;br/&gt;&lt;br/&gt;剛開始感覺比 Audacity 麻煩一點，沒辦法直接做正規化等等，但當效果都加好之後，有段要重錄的話錄好就完成了，不用所有 sample 重新來過。&lt;/p&gt;&lt;p class="ytembed-default" style=""&gt;&lt;iframe id="ytplayer" type="text/html" width="640" height="360" style="position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;" src="https://www.youtube.com/embed/PEWtJbIswWA?autoplay=0&amp;amp;origin=https://kisaragi-hiu.com" frameborder="0"&gt;&lt;/iframe&gt;&lt;/p&gt;</content></entry><entry><title type="text">新網站</title><id>urn:https-kisaragi-hiu-com:blog-2017-03-19-new-website-html</id><published>2017-03-19T05:00:00+08:00</published><updated>2017-03-19T05:00:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2017-03-19-new-website.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;想要有個簡單的檔案記錄所有連結&lt;br/&gt;&lt;br/&gt;→放在Github Pages好了&lt;br/&gt;&lt;br/&gt;→試試看Jekyll好了&lt;br/&gt;&lt;br/&gt;→還是直接弄成完整的網站吧&lt;br/&gt;&lt;br/&gt;什麼的。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;結果就這樣的，Blogger那裡正式的被取代掉了呢。&lt;br/&gt;&lt;br/&gt;總之，新網站。&lt;/p&gt;</content></entry><entry><title type="text">Han Characters</title><id>urn:https-kisaragi-hiu-com:blog-2016-06-30-han-characters-html</id><published>2016-06-30T00:00:00+08:00</published><updated>2016-06-30T00:00:00+08:00</updated><link rel="alternate" href="https://kisaragi-hiu.com/blog/2016-06-30-han-characters.html?utm_source=all&amp;utm_medium=Atom"/><author><name>Kisaragi Hiu</name></author><content type="html">&lt;p&gt;If you're learning a language using Han characters, and you haven't known Han characters already, start with just the phonetic alphabets first. If you know them already... maybe starting with just phonetic alphabets would also be a good idea, but the difference won't be that significent.&lt;/p&gt;&lt;p&gt;So, say if you're starting to learn Mandarin. You first learn the phonetic alphabet of choice (I'd advice Bopomofo since it's, I think, more optimized for Mandarin, but pinyin may feel more familiar), then just start learning it without thinking about Han characters.&lt;br/&gt;After a while, when you have a basic set of vocabulary, start learning the Han characters - assigning these characters to the words. For example, after you've learned "zhuo zi5"(table), "yi3 zi5" (chair), and maybe when you can say something like "wo3 zhuo4 zai4 yi3 zi5 shang4, kang4 zhe5 yi4 zhang zhuo zi5" (I sit on a chair looking at a table), you start learning the Han character for wo3 (I): 我, zhuo (table): 桌, kang4 (look): 看, etc., eventually learning the whole sentence's Han characters. (我坐在椅子上看著一張桌子)&lt;/p&gt;&lt;p&gt;This is how I think Han characters work: they represent ideas, and are assigned to words for better clarification.&lt;/p&gt;</content></entry>
</feed>